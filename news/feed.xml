<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Ruma</title>
    <subtitle>News for the Ruma project.</subtitle>
    <link href="https://www.ruma.io/news/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://www.ruma.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2021-08-22T00:00:00+00:00</updated>
    <id>https://www.ruma.io/news/feed.xml</id>
    <entry xml:lang="en">
        <title>GSoC 2021: API Coverage Final Summary</title>
        <author>
            <name>Adam Blanchet</name>
        </author>
        <published>2021-08-22T00:00:00+00:00</published>
        <updated>2021-08-22T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/gsoc-coverage/" type="text/html"/>
        <id>https://www.ruma.io/news/gsoc-coverage/</id>
        <content type="html">&lt;h2 id=&quot;time-flies&quot;&gt;Time Flies&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s been 10 weeks already! This year&#x27;s Google Summer of Code is coming to an
end. I really enjoyed working on this project, which turned out to be very
varied in what parts of Ruma I worked with: I&#x27;ve added endpoints, modified and
added new event types, created new identifier types and worked on macros.&lt;&#x2F;p&gt;
&lt;p&gt;This year for GSoC I had a project of extending Ruma&#x27;s API coverage. More
specifically, I would complete Ruma&#x27;s coverage of Matrix&#x27;s Identity Service API.
On this front, I was successful, and now Ruma has 100% coverage of those
endpoints! I also had plans to implement new MSCs, namely &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;master&#x2F;proposals&#x2F;1946-secure_server-side_storage.md&quot;&gt;MSC1946&lt;&#x2F;a&gt;: Secure
Secret Storage and Sharing and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;rav&#x2F;proposals&#x2F;notification_attributes&#x2F;proposals&#x2F;2785-notification-attributes.md&quot;&gt;MSC2785&lt;&#x2F;a&gt;: Event Notification Attributes and
Actions. Along the way, I would also work on resolving a few issues here and
there, which helped get myself better acquainted with Ruma&#x27;s codebase.&lt;&#x2F;p&gt;
&lt;p&gt;Working on Ruma was a good learning experience for me. I had an opportunity to
do actual work on a project which is used in the real world. All the while, I
was learning and practicing many skills. Working with git, coding against a
formal specification (and dealing with the problems caused by this). Although I
did learn a lot at University, this was a very useful hands-on experience. And
as a bonus, I got to program in Rust for the whole Summer! Rust is a language I
particularly enjoy using, but which I unfortunately rarely have the opportunity
to use at school. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-final-parts-of-the-project&quot;&gt;The Final Parts of the Project&lt;&#x2F;h2&gt;
&lt;p&gt;The end of my project did not turn out to be as smooth as planned. As mentioned
in the previous blog post. I had originally planned to work on adding support
for Secure Secret Storage and Sharing, introduced by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;master&#x2F;proposals&#x2F;1946-secure_server-side_storage.md&quot;&gt;MSC1946&lt;&#x2F;a&gt;. Although the
sharing part was possible to implement with the current macros available in
Ruma, storage requires a major refactoring of these macros. This means that
although I was able to do the groundwork for supporting &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;master&#x2F;proposals&#x2F;1946-secure_server-side_storage.md&quot;&gt;MSC1946&lt;&#x2F;a&gt;, secret
storage will not be usable until those macros are reworked. &lt;&#x2F;p&gt;
&lt;p&gt;The reason for all this trouble is that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;master&#x2F;proposals&#x2F;1946-secure_server-side_storage.md&quot;&gt;MSC1946&lt;&#x2F;a&gt; introduces an event
&lt;code&gt;m.secret_storage.profile.[key_ID]&lt;&#x2F;code&gt; where &lt;code&gt;[key_ID]&lt;&#x2F;code&gt; is a placeholder for the
ID of a key to be stored. This means there could be any number of event types
possible, instead of the until now predefined set of event types. I thus opened
an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;686&quot;&gt;issue&lt;&#x2F;a&gt; for this to be supported in Ruma. &lt;&#x2F;p&gt;
&lt;p&gt;Although secret storage will need to wait to be merged, secret sharing has
already been merged. This part of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;master&#x2F;proposals&#x2F;1946-secure_server-side_storage.md&quot;&gt;MSC1946&lt;&#x2F;a&gt;, as its name suggests, allows
clients to share secrets between devices. As such, keys can be exchanged between
devices using the  part of the Matrix Spec introduced by this MSC. In fact,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-rust-sdk&#x2F;issues&#x2F;296&quot;&gt;&lt;code&gt;matrix-rust-sdk&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; has already implemented &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-rust-sdk&#x2F;issues&#x2F;296&quot;&gt;the gossiping of cross signing
keys&lt;&#x2F;a&gt;, building on top of Ruma&#x27;s implementation of Secret Sharing.&lt;&#x2F;p&gt;
&lt;p&gt;As it wasn&#x27;t realistic to include the major macro refactor in my GSoC project, I
decided to move onto  &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;509&quot;&gt;MSC2785: Event notification attributes and actions&lt;&#x2F;a&gt;. I
had kept this as an extra goal for my project, and seemed to be a good fit for
the situation. Unluckily though, when I read more into the MSC&#x27;s text, I
realized I would encounter the exact same problem as I had with Secret Storage.
This MSC introduced the event type &lt;code&gt;m.notifications_profile.&amp;lt;profile&amp;gt;&lt;&#x2F;code&gt; where
&lt;code&gt;&amp;lt;profile&amp;gt;&lt;&#x2F;code&gt; is the name of the profile to store. I still powered ahead,
implementing the different endpoints and events, temporarily setting a fixed
event type name for &lt;code&gt;m.notifications_profile.&amp;lt;profile&amp;gt;&lt;&#x2F;code&gt;.  This allowed the
grunt of the work to be done, meaning it would be ready for when Ruma gets
support for variable event names. Although the MSC isn&#x27;t finalized as of yet,
all the currently laid out endpoints and events have been implemented in a
branch ready to be merged once possible.&lt;&#x2F;p&gt;
&lt;p&gt;Thus there are a couple of pull requests which are blocked and that will be
merged in the future, once variable event type names are supported:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;688&quot;&gt;Add support for MSC2785: Event notification attributes and actions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;687&quot;&gt;Add secret storage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Finally, I also worked on this issue:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;693&quot;&gt;Generate From impls for event enums&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To solve this last issue, I decided to learn how to write procedural macros. In
the first half of GSoC, I had created a new &lt;code&gt;macro_rules!&lt;&#x2F;code&gt; macro, largely based
on a pre-existing one. As I had very little experience in writing macros, and
zero experience in writing procedural ones, I decided to read a short series of
&lt;a href=&quot;https:&#x2F;&#x2F;blog.turbo.fish&#x2F;proc-macro-basics&#x2F;&quot;&gt;blog posts&lt;&#x2F;a&gt; to get myself up to speed. Once that was done, I got to work: I
added the generation of &lt;code&gt;From&lt;&#x2F;code&gt; trait implementations inside the pre-existing
proc-macro code which generate the event enums. I also added a derive
macro for enums created manually. I really enjoyed working on this, which was my
first foray into Rust&#x27;s procedural macros.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recap-of-prs-for-my-gsoc&quot;&gt;Recap of PRs for my GSoC&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;start-of-gsoc-with-the-identity-service-api&quot;&gt;Start of GSoC with the Identity Service API&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;618&quot;&gt;3PID validity endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;621&quot;&gt;3PID bind endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;626&quot;&gt;Invitation signing endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;631&quot;&gt;Store invitation endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;627&quot;&gt;3PID unbind endpoint&lt;&#x2F;a&gt;(finished at the end of GSoC)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;middle-of-gsoc-implementing-mscs-and-adding-types&quot;&gt;Middle of GSoc, implementing MSCs and adding types&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;640&quot;&gt;Add client secret and session identifier types&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;645&quot;&gt;Add RoomName struct&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;650&quot;&gt;Update endpoints for Blurhash implementation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;657&quot;&gt;Add &amp;quot;knock&amp;quot; feature from MSC2403&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;663&quot;&gt;Implement reasons for leaving a room&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;end-of-gsoc&quot;&gt;End of GSoC&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;688&quot;&gt;Add support for MSC2785: Event notification attributes and actions&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
(commit &lt;code&gt;c556e1c5cb1894a6a357799557b07088deb6bea3&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;687&quot;&gt;Add secret storage&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
(commit &lt;code&gt;4eae28643036321c7ad86dc8d887b5790b68092b&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;693&quot;&gt;Generate From impls for event enums&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>GSoC 2021: Tooling Final Summary</title>
        <author>
            <name>Devin Ragotzy</name>
        </author>
        <published>2021-08-22T00:00:00+00:00</published>
        <updated>2021-08-22T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/gsoc-tools/" type="text/html"/>
        <id>https://www.ruma.io/news/gsoc-tools/</id>
        <content type="html">&lt;p&gt;What a fun summer! I was hoping I would become more a part of the Rust community this year, and
I think I have. I learned how to open an MCP (Major Change Proposal), which is a process that
language and implementation changes not big enough for an RFC go through. I am involved in an
effort to create a new plugin lint system similar to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;Clippy&lt;&#x2F;a&gt;. I made a few more contributions
to Clippy, fixing old lints and adding a new one. I am happy to become more involved in Ruma and
Rust and plan to finish all my works in progress.&lt;&#x2F;p&gt;
&lt;p&gt;Since I am working with more people than just my mentor, making progress seems to take longer.
I am glad for the experience working with multiple people, learning how to follow directions from
multiple people. You have to be able to write code in the &amp;quot;voice&amp;quot; of someone else or at least
meet them halfway. I know that this is an invaluable skill that will serve me well in my career.
Thank you to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&quot;&gt;@jplatte&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iinuwa&quot;&gt;@iinuwa&lt;&#x2F;a&gt; for all the help and encouragement!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;starting-on-automation&quot;&gt;Starting on Automation&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DevinR528&#x2F;cargo-sort&quot;&gt;cargo-sort&lt;&#x2F;a&gt; Some of the work on this happened before GSoC started but not all
(I&#x27;m proud of this crate)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DevinR528&#x2F;cargo-sort&#x2F;compare&#x2F;main@%7B2021-06-07%7D...main&quot;&gt;cargo-sort work during GSoC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;7299&quot;&gt;nonstandard-macro-braces&lt;&#x2F;a&gt; Lint for consistent macro brace usage&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;7300&quot;&gt;import-renaming&lt;&#x2F;a&gt; Lint to enforce import renaming&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;7315&quot;&gt;disallow-types&lt;&#x2F;a&gt; Lint to ban specified types&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;7431&quot;&gt;fix FP&lt;&#x2F;a&gt; Fix false positive in macro brace lint&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;639&quot;&gt;enabled non_exhaustive structs lint&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;634&quot;&gt;ruma&#x2F;ruma#634&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;635&quot;&gt;ruma&#x2F;ruma#635&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;636&quot;&gt;ruma&#x2F;ruma#636&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;637&quot;&gt;ruma&#x2F;ruma#637&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;638&quot;&gt;ruma&#x2F;ruma#638&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;second-half&quot;&gt;Second Half&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;7543&quot;&gt;module layout style&lt;&#x2F;a&gt; Clippy now has the ability to lint on the module
layout chosen&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;86809&quot;&gt;non_exhaustive reachable lint&lt;&#x2F;a&gt; I&#x27;ve been busy continuing work on this pull
request&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-linting&#x2F;design&quot;&gt;plugin lint design&lt;&#x2F;a&gt; I spent a few days working with a group of people designing a new 
linter that could load third-party lints&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-linting&#x2F;design&#x2F;discussions&quot;&gt;plugin lint discussions&lt;&#x2F;a&gt; Very insightful experience into the open-source design
process&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;658&quot;&gt;enabled non_exhaustive enums lint&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;648&quot;&gt;ruma&#x2F;ruma#648&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;649&quot;&gt;ruma&#x2F;ruma#649&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;652&quot;&gt;ruma&#x2F;ruma#652&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;654&quot;&gt;ruma&#x2F;ruma#654&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;656&quot;&gt;ruma&#x2F;ruma#656&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;676&quot;&gt;enabled all the new lints&lt;&#x2F;a&gt; This turns on all the Clippy lints that I added that
were not enabled by default&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;progress-on-automated-checks-for-ruma&quot;&gt;Progress on Automated Checks for Ruma&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;221&quot;&gt;ruma&#x2F;ruma#221&lt;&#x2F;a&gt; Has almost been closed; only one item remains&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I think the work on the linter will be &lt;strong&gt;extremely&lt;&#x2F;strong&gt; valuable if we can get it working. The ability
to write crate-specific lints will be a huge help to library writers and users. I can imagine many such
lints for a complex library like Ruma. I am excited to be involved!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Google Summer of Code 2021 Intro</title>
        <author>
            <name>Adam Blanchet and Devin Ragotzy</name>
        </author>
        <published>2021-07-16T00:00:00+00:00</published>
        <updated>2021-07-16T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/gsoc-2021-intro/" type="text/html"/>
        <id>https://www.ruma.io/news/gsoc-2021-intro/</id>
        <content type="html">&lt;p&gt;Hello all! This year, Ruma has the pleasure of having two students for &lt;a href=&quot;https:&#x2F;&#x2F;summerofcode.withgoogle.com&#x2F;&quot;&gt;Google
Summer of Code (GSoC) 2021&lt;&#x2F;a&gt;: Devin (who worked on Ruma&#x27;s proc-macro code during last year&#x27;s GSoC) and Adam. We&#x27;ll let them [re]introduce
themselves.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;ruma-api-coverage-gsoc&quot;&gt;Ruma API Coverage GSoC&lt;&#x2F;h1&gt;
&lt;p&gt;by Adam Blanchet&lt;&#x2F;p&gt;
&lt;p&gt;This year for GSoC, Ruma has two students! I am the &amp;quot;newer&amp;quot; one of the two, and
my name is Adam Blanchet. I&#x27;ve been at work adding support for more of the
Matrix Spec in the past few weeks, and will be continuing on doing so for the
remainder of GSoC.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;identity-service-api&quot;&gt;Identity Service API&lt;&#x2F;h2&gt;
&lt;p&gt;Although I had made progress before the official coding period for GSoC had
started, I continued with finishing the remaining unimplemented Identity Service
API endpoints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;618&quot;&gt;3PID validity endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;621&quot;&gt;3PID bind endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;626&quot;&gt;invitation signing endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;631&quot;&gt;store invitation endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;627&quot;&gt;3PID unbind endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Apart from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;627&quot;&gt;3PID unbind endpoint&lt;&#x2F;a&gt; which is currently blocked,
this concludes the full coverage of the Identity Service API. This means that
now projects built upon Ruma will be able to more easily integrate functionality
with identity servers. This could also enable easier development of an identity
server written in Rust!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementing-mscs-and-adding-types&quot;&gt;Implementing MSCs and adding types&lt;&#x2F;h2&gt;
&lt;p&gt;I then moved on to a few other miscellaneous issues, to get accustomed to
working on the other parts of the Ruma project:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;640&quot;&gt;Add client secret and session identifier types&lt;&#x2F;a&gt;:
I found this PR to be more interesting than its title may indicate. Not only
did I add two identifier types, but I added a new macro to create validated
identifier types. The new macro was also used to greatly simplify the
declaration of &lt;code&gt;ServerName&lt;&#x2F;code&gt; struct. I really enjoyed working on this PR. It
was an occasion to create a new macro to simplify the creation of these and
new types. I had never written macro code before, and it was a good occasion
for me to learn something new!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;645&quot;&gt;Add RoomName struct&lt;&#x2F;a&gt;:
This one did not involve macro code, though similar in principle to the
previous PR. It adds a &lt;code&gt;RoomName&lt;&#x2F;code&gt; struct to be used in an event, which
enforces a maximum length.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;650&quot;&gt;Update endpoints for Blurhash implementation&lt;&#x2F;a&gt;:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;anoa&#x2F;blurhash&#x2F;proposals&#x2F;2448-blurhash-for-media.md#profile-endpoints&quot;&gt;MSC2488&lt;&#x2F;a&gt; adds the use of Blurhashes to the Matrix Spec. Although
some Blurhash support had been previously added to Ruma, I
extended this to all endpoints and events specified in the MSC.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;657&quot;&gt;Add &amp;quot;knock&amp;quot; feature from MSC2403&lt;&#x2F;a&gt;:
This adds support for knocking on rooms, a feature which I&#x27;m looking forward
to see implemented in clients. It was introduced in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;master&#x2F;proposals&#x2F;2403-knock.md&quot;&gt;MSC2403&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;663&quot;&gt;Implement reasons for leaving a room&lt;&#x2F;a&gt;:
Adding this feature, introduced in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;master&#x2F;proposals&#x2F;1983-leave-reasons.md&quot;&gt;MSC1983&lt;&#x2F;a&gt;, seemed rather straightforward.
However, I bumped into an issue with a conditionally compiled field with a
lifetime annotation. Thankfully, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DevinR528&quot;&gt;@DevinR528&lt;&#x2F;a&gt; helped diagnose the problem
which was some macro code, for which they think they have found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;664&quot;&gt;a
solution&lt;&#x2F;a&gt; along with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&quot;&gt;@jplatte&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once that fix is implemented, we will also be able to merge my PR.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s next?&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m looking forward to implementing the MSC for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-doc&#x2F;blob&#x2F;master&#x2F;proposals&#x2F;1946-secure_server-side_storage.md&quot;&gt;Secure Secret Storage and
Sharing&lt;&#x2F;a&gt;. This is the second large part of my project, it will involve
adding a number of events to support storing and sharing both keys and secrets.
To achieve full support, I would also need to implement crypto routines. I
expect that adding these will require more effort than adding the events, though
I look forward to the challenge.&lt;&#x2F;p&gt;
&lt;p&gt;I found my first half of GSoC to be very enriching. I really enjoyed working on
this project: I got to learn how to read and apply a specification, and I
learned the rigor required for a project such as Ruma. I have sometimes been
caught off-guard: sometimes I miss extraneous newlines, sometimes (often) I
forget to add a changelog entry, and other similar more stylistic rather than
functional issues. Ruma is a big project with many crates, yet it maintains
consistency throughout, a quality I greatly appreciate. I now know that this
consistency comes from the thoroughness with which each change is checked, and I
hope to improve my own rigor when it comes to each of my pull requests.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;ruma-tooling-gsoc&quot;&gt;Ruma Tooling GSoC&lt;&#x2F;h1&gt;
&lt;p&gt;by Devin Ragotzy&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s been a busy few weeks! I have started the process of checking four todo
items off of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;221&quot;&gt;Ruma&#x27;s automated checks&lt;&#x2F;a&gt; issue by contributing
lints to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;Clippy&lt;&#x2F;a&gt; project.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;7299&quot;&gt;check macro brace usage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;7300&quot;&gt;check import rename&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;7315&quot;&gt;check for disallowed types&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;issues&#x2F;7434&quot;&gt;temporarily broke Clippy&lt;&#x2F;a&gt;, Oh No! Luckily, the
fix seems to have worked.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;7431&quot;&gt;fix the macro braces check&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;ve spent a lot of time familiarizing myself with the rustc &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;master&#x2F;compiler&#x2F;rustc_mir_build&#x2F;src&#x2F;thir&#x2F;pattern&#x2F;usefulness.rs#L1205&quot;&gt;usefulness&lt;&#x2F;a&gt;
checker. The is how the Rust compiler determines if you have a match for all
possible patterns and checks if any of the patterns are useless.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; x { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; `x` is matched exhaustively (all match patterns are useful)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{},
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{},
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; true =&amp;gt; {}, would be un-useful
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is where I now plan to add a lint to check for missed patterns on structs
and enums that are marked &lt;code&gt;non_exhaustive&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;84332&quot;&gt;see issue&lt;&#x2F;a&gt;).
This is helpful to Ruma because all of our public types are marked in this way,
allowing us to update our types in a non-breaking way while still informing
users of the change. Also, for anyone interested, I saw an interesting &lt;a href=&quot;https:&#x2F;&#x2F;niedzejkob.p4.team&#x2F;rust-np&#x2F;&quot;&gt;blog
post&lt;&#x2F;a&gt; about usefulness checking.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;86809&quot;&gt;rustc reachable lint PR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For the last few days, I have been working with my mentor &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&quot;&gt;@jplatte&lt;&#x2F;a&gt; to find
and fix a very sneaky issue with conditionally compiled fields and lifetime
annotations. This was found by my fellow GSoC participant in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;663&quot;&gt;this
PR&lt;&#x2F;a&gt;. I think we have finally found a solution, fingers crossed.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;664&quot;&gt;here is a WIP PR to fix the issue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I have thoroughly enjoyed the first half of this year&#x27;s GSoC! I&#x27;m excited to
contribute to back the compiler for the language we all love so much ;). In the
second half of GSoC I hope to get &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DevinR528&#x2F;ruma-check&quot;&gt;&lt;code&gt;ruma-check&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to a
usable state adding the few checks left from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;221&quot;&gt;Ruma&#x27;s automated
checks&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Devin and Adam have already made it through the first half of GSoC and have made
good progress. We&#x27;re looking forward to the rest of the summer with these two!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Google Summer of Code Wrap-up</title>
        <author>
            <name>Devin Ragotzy</name>
        </author>
        <published>2020-08-28T00:00:00+00:00</published>
        <updated>2020-08-28T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/gsoc-ends-2020/" type="text/html"/>
        <id>https://www.ruma.io/news/gsoc-ends-2020/</id>
        <content type="html">&lt;p&gt;Wow the summer has flown by, it feels like just yesterday I was learning how to
rebase and what exactly it is Ruma does. I exaggerate slightly, but it is a big
library with lots of public API surface. I have learned more in the last few
months than in two years of school. I have been able to observe and participate
in a project with a community growing around it, been a part of discussions
about design and best practices, given and received numerous code reviews as
well as learned the process of addressing the feedback, and working from a
specification. In short, this has been an amazing opportunity to gain 
experience in all the things that are hard to obtain in a classroom.&lt;&#x2F;p&gt;
&lt;p&gt;My project goal was to improve the existing macros in ruma-events-macros and
ruma-api-macros. It became clear early on that this would include some major
API changes and that improving the macros as they were was pointless without
also moving to a new public API. While improving the durability and
readability of the macro code I also rewrote entire sections to accommodate
the new design.&lt;&#x2F;p&gt;
&lt;p&gt;A quick overview of the Matrix protocol for reference: a client sends content
that is interpreted by the server as events. The server distributes those
events out to other clients and other servers (the server case is known as
federation). Ruma groups these events by kind Message, State, Ephemeral,
ToDevice and Basic which are represented as generic structs (&lt;code&gt;StateEvent&amp;lt;C&amp;gt;&lt;&#x2F;code&gt;).
Each event kind needs to be able to hold many different content types, for
state events there is room creation, room name, and membership events to name a
few. Using the macros, enums are generated to represent all state event
possibilities, so a variant for membership, room name, etc. These types exist
to support the core API request and response types for each endpoint that is
defined by the Matrix specification.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gsoc-starts-and-i-start-with-ruma-events&quot;&gt;GSoC Starts and I start with ruma-events&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;85&quot;&gt;remove old ruma-events macros&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;86&quot;&gt;start work for event content derive, move to generic &lt;code&gt;Event&lt;&#x2F;code&gt; structs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;101&quot;&gt;collect all content types into enum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;107&quot;&gt;add more types, making sure the macro works&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;108&quot;&gt;work on &lt;code&gt;Event&lt;&#x2F;code&gt; custom macro derive&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;111&quot;&gt;remove &lt;code&gt;raw&lt;&#x2F;code&gt; modules and &lt;code&gt;FromRaw&lt;&#x2F;code&gt; trait&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;119&quot;&gt;add each events enum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;122&quot;&gt;add trybuild tests for &lt;code&gt;ruma-events&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;more-work-on-ruma-events-now-a-part-of-the-new-mono-repo&quot;&gt;More work on ruma-events, now a part of the new mono-repo&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;52&quot;&gt;deserialization optimization for Any*Event, and benchmarking to verify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;68&quot;&gt;reverting the removal of enum_enum macro, learning a lot of git along the way&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;69&quot;&gt;it took me awhile but I got the hang of it, only one review issue!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;97&quot;&gt;add accessor methods to the enums, making them much nicer to use&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;work-on-ruma-client-api&quot;&gt;Work on ruma-client-api&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;104&quot;&gt;refactoring the &lt;code&gt;Api::to_tokens&lt;&#x2F;code&gt; code helped me get my head around this crate&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;105&quot;&gt;notice my commit messages are starting to looking better&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;108&quot;&gt;not everything works out...&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;109&quot;&gt;but you get it eventually&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;111&quot;&gt;deep dive into rust features, I learned a lot about them&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;back-to-ruma-events&quot;&gt;Back to ruma-events&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;130&quot;&gt;a ruma events and client-api rename&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;138&quot;&gt;add code to generate &lt;code&gt;redact&lt;&#x2F;code&gt; method in event_enum!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;139&quot;&gt;adding to existing code without breaking everything is hard&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;155&quot;&gt;converting to and from the rusty way&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;179&quot;&gt;I love writing proc_macros, this was a fun one! Adding lifetimes in the req&#x2F;resp macro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;continuing-maintenance&quot;&gt;Continuing maintenance&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;190&quot;&gt;quality of life stuff, the day to day work of a maintainer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;201&quot;&gt;allow the internal macros to be used outside of the ruma crate more easily&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;213&quot;&gt;adding small needed features to the macros&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;234&quot;&gt;good ol&#x27; fashioned closing issues!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One of my personal goals was to become more familiar with git. With the help
of my mentor I now feel more confident using this tool that is so essential to
developers. I became fairly adept at merging, rebasing, and navigating all the
headaches that come with that. I learned plenty of new commands. A few
highlights: &lt;code&gt;cherry-pick&lt;&#x2F;code&gt; and specific uses of &lt;code&gt;reset&lt;&#x2F;code&gt; to avoid copy-pasting
fixes and adding more commits. I used the &lt;code&gt;reset&lt;&#x2F;code&gt; command to craft good
commits, splitting work into appropriate chunks. I am glad that I had the
opportunity to hone my git skills. I feel like I have accomplished my goal and
then some!&lt;&#x2F;p&gt;
&lt;p&gt;I am proud of the work that I have done: Being part of moving ruma-events much
closer to the &lt;code&gt;0.22&lt;&#x2F;code&gt; release and creating macros to generate types specific to
the Matrix specification. Working with the community that has grown around Ruma
has been rewarding and I plan on sticking around.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>The End is Nigh</title>
        <author>
            <name>Devin Ragotzy</name>
        </author>
        <published>2020-07-16T00:00:00+00:00</published>
        <updated>2020-07-16T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/gsoc-update4-2020/" type="text/html"/>
        <id>https://www.ruma.io/news/gsoc-update4-2020/</id>
        <content type="html">&lt;p&gt;This week in the ruma&#x2F;matrix Google Summer of Code project, I worked on refactoring both &lt;code&gt;ruma-api&lt;&#x2F;code&gt; and &lt;code&gt;ruma-events&lt;&#x2F;code&gt;. After moving some of the larger chunks of the &lt;code&gt;ruma_api_macro::api::Api::to_tokens&lt;&#x2F;code&gt; method to helper functions, I spent time removing repetition from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;109&quot;&gt;&lt;code&gt;Request&#x2F;Response&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; code generated by the &lt;code&gt;ruma_api!&lt;&#x2F;code&gt; macro. For &lt;code&gt;ruma-events&lt;&#x2F;code&gt;, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;121&quot;&gt;input parsing&lt;&#x2F;a&gt; was changed to only allow valid names for the &lt;code&gt;Any*Event&lt;&#x2F;code&gt; enums. Altering the input parsing had the added benefit of replacing all of the string comparison and manipulation with strongly typed comparison and manipulation.&lt;&#x2F;p&gt;
&lt;p&gt;The final few issues to be resolved before the next crates.io release for &lt;code&gt;ruma-events&lt;&#x2F;code&gt; can happen are related to redacted events. Support for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;114&quot;&gt;redacted events&lt;&#x2F;a&gt; was added to the &lt;code&gt;Any*Event&lt;&#x2F;code&gt; enums, they now have redacted variants of each event kind. A few follow-up PR&#x27;s have been merged to fully integrate redacted events into &lt;code&gt;ruma-events&lt;&#x2F;code&gt;, fixing specific event &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;128&quot;&gt;deserialization issues&lt;&#x2F;a&gt; and splitting the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;135&quot;&gt;&lt;code&gt;UnsignedData&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; struct into &lt;code&gt;Unsigned&lt;&#x2F;code&gt; and &lt;code&gt;RedactedUnsigned&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Successful Updates</title>
        <author>
            <name>Devin Ragotzy</name>
        </author>
        <published>2020-06-26T00:00:00+00:00</published>
        <updated>2020-06-26T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/gsoc-update3-2020/" type="text/html"/>
        <id>https://www.ruma.io/news/gsoc-update3-2020/</id>
        <content type="html">&lt;p&gt;This week in the ruma&#x2F;matrix Google Summer of Code project, ruma-events was made ready for use! After adding stripped and sync event generation to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;commit&#x2F;fdf87a38a219933ffe99b17baf87841a79702f28&quot;&gt;&lt;code&gt;event_enum!&lt;&#x2F;code&gt; macro&lt;&#x2F;a&gt; there were only a few small tweaks needed to try it out in some dependent rust crates. I spent a few days converting &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-rust-sdk&#x2F;pull&#x2F;63&quot;&gt;matrix-rust-sdk&lt;&#x2F;a&gt; to use the ruma-monorepo. Since ruma is used on both client and server-side, I also opened a PR to update &lt;a href=&quot;https:&#x2F;&#x2F;git.koesters.xyz&#x2F;timo&#x2F;conduit&#x2F;pulls&#x2F;133&quot;&gt;Conduit&lt;&#x2F;a&gt;, a homeserver implementation written in Rust. To test that everything worked together, I updated &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DevinR528&#x2F;rumatui&#x2F;commit&#x2F;1ae8776f9a59c297c8c9b2287f7c830ab67302b1&quot;&gt;rumatui&lt;&#x2F;a&gt;, my command-line client written in rust.&lt;&#x2F;p&gt;
&lt;p&gt;Then I could test that Conduit sent, and matrix-rust-sdk received the new ruma events successfully. While updating, I felt the pain of not having accessor methods for the &lt;code&gt;Any*Event&lt;&#x2F;code&gt; enums to get at the event fields held within. I have opened a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;97&quot;&gt;pull request&lt;&#x2F;a&gt; to add the generation of these methods to the &lt;code&gt;event_enums!&lt;&#x2F;code&gt; macro. Hopefully, the Conduit and matrix-sdk PR&#x27;s will be merged and the ruma monorepo can be tested in the wild!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Oops, Now Revert</title>
        <author>
            <name>Devin Ragotzy</name>
        </author>
        <published>2020-06-19T00:00:00+00:00</published>
        <updated>2020-06-19T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/gsoc-update2-2020/" type="text/html"/>
        <id>https://www.ruma.io/news/gsoc-update2-2020/</id>
        <content type="html">&lt;p&gt;This week in ruma-events&#x27; Google Summer of Code project, after trying out the new &lt;code&gt;Any*Event&lt;&#x2F;code&gt; enums &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DevinR528&#x2F;matrix-rust-sdk&#x2F;pull&#x2F;2&quot;&gt;&lt;code&gt;matrix-rust-sdk&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, we found a few big flaws. There was no easy way to go from &lt;code&gt;StateEvent&amp;lt;AnyStateEventContent&amp;gt;&lt;&#x2F;code&gt; to &lt;code&gt;StateEvent&amp;lt;SpecificEventContent&amp;gt;&lt;&#x2F;code&gt;, the other issue was one could create a &lt;code&gt;StateEvent&lt;&#x2F;code&gt; with differing &lt;code&gt;content&lt;&#x2F;code&gt; and &lt;code&gt;prev_content&lt;&#x2F;code&gt; fields using the &lt;code&gt;AnyStateEventContent&lt;&#x2F;code&gt; enum. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;68&quot;&gt;0.22 ruma-events&lt;&#x2F;a&gt; will be similar to the existing API; each event type has a corresponding event enum variant.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;AnyStateEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{
    RoomMember(StateEvent&amp;lt;MemberEventContent&amp;gt;),
    RoomAliases(StateEvent&amp;lt;AliasesEventContent&amp;gt;),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There were a few minor fixes during the week also. Unknown field deserialization is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;57&quot;&gt;fixed&lt;&#x2F;a&gt;, allowing deserialization of a JSON blob that has extra fields which are ignored. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;59&quot;&gt;Custom events&lt;&#x2F;a&gt; are now present in the &lt;code&gt;Any*EventContent&lt;&#x2F;code&gt; enums, although now they have to be moved up to be included in &lt;code&gt;Any*Event&lt;&#x2F;code&gt; enums. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;pull&#x2F;52&quot;&gt;Benchmarks&lt;&#x2F;a&gt; for deserialization have been added and used to increase performance.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Breaking ruma-events</title>
        <author>
            <name>Devin Ragotzy</name>
        </author>
        <published>2020-06-11T00:00:00+00:00</published>
        <updated>2020-06-11T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/gsoc-update-2020/" type="text/html"/>
        <id>https://www.ruma.io/news/gsoc-update-2020/</id>
        <content type="html">&lt;p&gt;This week in ruma-events&#x27; Google Summer of Code project, I was able to finish the macros needed to generate the event content enums and trait implementations required for events. I started by defining the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;107&quot;&gt;generic event structs&lt;&#x2F;a&gt; (state, message, etc.) and manually writing the &lt;code&gt;Serialize&lt;&#x2F;code&gt; and &lt;code&gt;Deserialize&lt;&#x2F;code&gt; implementations. Over the next few days, this was moved into a custom derive macro called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;108&quot;&gt;&lt;code&gt;Event&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. The derive now implements all necessary traits with appropriate bounds, so a &lt;code&gt;StateEvent&amp;lt;C&amp;gt;&lt;&#x2F;code&gt; can not contain any ephemeral event content and so forth. I have removed the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;111&quot;&gt;&lt;code&gt;raw&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; mod and related &lt;code&gt;FromRaw&lt;&#x2F;code&gt; and &lt;code&gt;TryFromRaw&lt;&#x2F;code&gt; traits, moving the validation into the deserialization and constructor for the few types that needed it. On the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;106&quot;&gt;event content&lt;&#x2F;a&gt; side of things, a function like procedural macro was used to allow declaring the enum using Matrix event type identifiers.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;event_content_enum! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Any message event.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;    name: AnyMessageEventContent,
    events: [
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;m.call.answer&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;m.room.message&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Produces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;AnyMessageEventContent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{
    CallAnswer(CallAnswerEventContent),
    RoomMessage(MessageEventContent),
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Ruma gets in on Google Summer of Code</title>
        <author>
            <name>Devin Ragotzy</name>
        </author>
        <published>2020-06-01T00:00:00+00:00</published>
        <updated>2020-06-01T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/gsoc-begins-2020/" type="text/html"/>
        <id>https://www.ruma.io/news/gsoc-begins-2020/</id>
        <content type="html">&lt;p&gt;Thanks to GSoC and the continued help of Jonas Platte, Ruma&#x27;s GSoC mentor, there is a new contributor... me! My name is Devin Ragotzy, a University student from Michigan. I was chosen to help contribute to the macro code of ruma-events and ruma-api.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ruma-community-bonding&quot;&gt;Ruma Community Bonding&lt;&#x2F;h2&gt;
&lt;p&gt;Before the official coding period began on June 1st, a large breaking change started taking shape for the upcoming release of ruma-events &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;issues&#x2F;82&quot;&gt;0.22.0&lt;&#x2F;a&gt;. Jonas, I, and others have been hard at work, replacing the previous event declaration macro with a set of derive macros and generic event types, as well as getting rid of the boilerplate required for event enums (the types currently found under &lt;code&gt;ruma_events::collections&lt;&#x2F;code&gt;). The new types will be able to express JSON events from a Matrix server with more accuracy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;planned-work-for-ruma-api&quot;&gt;Planned work for ruma-api&lt;&#x2F;h2&gt;
&lt;p&gt;Once the macros in ruma-events are implemented, I will switch gears to work on ruma-api.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First, add a few tests to ensure the changes I make do not break important functionality
&lt;ul&gt;
&lt;li&gt;Test macro code using &lt;code&gt;macrotest&lt;&#x2F;code&gt; and&#x2F;or &lt;code&gt;trybuild&lt;&#x2F;code&gt; which test errors or expansions respectively&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Allow more code sharing between &lt;code&gt;Request&lt;&#x2F;code&gt; and &lt;code&gt;Response&lt;&#x2F;code&gt; processing inside the macro&lt;&#x2F;li&gt;
&lt;li&gt;Refactor &lt;code&gt;ruma_api!&lt;&#x2F;code&gt;, breaking up the large block of code in &lt;code&gt;Api::to_tokens&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Document any refactored or new code as I work&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Ruma is dead, long live Ruma!</title>
        <author>
            <name>Jonas Platte</name>
        </author>
        <published>2020-04-10T00:00:00+00:00</published>
        <updated>2020-04-10T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/ruma-is-dead-long-live-ruma-2020-04-10/" type="text/html"/>
        <id>https://www.ruma.io/news/ruma-is-dead-long-live-ruma-2020-04-10/</id>
        <content type="html">&lt;p&gt;Today, I have a bit of a sad announcement to make:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ruma-the-homeserver-won-t-be-developed-anymore&quot;&gt;Ruma, the homeserver, won&#x27;t be developed anymore&lt;&#x2F;h2&gt;
&lt;p&gt;To those who have actively been following the project, this probably won&#x27;t be a
big surprise, given the homeserver&#x27;s readme file was already update do note the
missing maintenance and people interested in contributing to the homeserver have
now gathered around a new homeserver project by the name of &lt;a href=&quot;https:&#x2F;&#x2F;conduit.rs&#x2F;&quot;&gt;Conduit&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The main reason for ending homeserver development is that nobody who has
previously worked on its codebase is currently able to guide and review work on
it. The codebase has also bit-rotted a lot, with the web framework it uses being
almost un-maintained and a number of its other dependencies having seen major
new releases since the most recent commit; it also doesn&#x27;t build on
ruma-client-api, for the simple reason that ruma-client-api simply didn&#x27;t exist
yet when most of the homeserver work happened.&lt;&#x2F;p&gt;
&lt;p&gt;However, the end of the homeserver does not at all mean the end of Ruma, the
overall project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-future-of-ruma-the-project&quot;&gt;The future of Ruma, the project&lt;&#x2F;h2&gt;
&lt;p&gt;We will be continuing work on our library crates, making sure they are usable
for all kinds of applications, including homeservers. The new homeserver project
mentioned at the beginning is based on them and some other folks are currently
working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;matrix-rust-sdk&quot;&gt;a highlevel client library&lt;&#x2F;a&gt;, also using many of
Ruma&#x27;s library crates.&lt;&#x2F;p&gt;
&lt;p&gt;I am planning to replace the current website with a new one, mostly for
technical reasons, but the new one will also reflect our changed focus. This
work hasn&#x27;t started yet, but in the interim I will likely update parts of the
current site. Other than that, nothing will really be different compared to last
year.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;if-you-are-still-interested-in-a-rust-homeserver&quot;&gt;If you are still interested in a Rust homeserver&lt;&#x2F;h2&gt;
&lt;p&gt;… then check out &lt;a href=&quot;https:&#x2F;&#x2F;conduit.rs&#x2F;&quot;&gt;Conduit&lt;&#x2F;a&gt;. It is a Matrix homeserver, written in Rust using
Ruma&#x27;s library crates. It is focused on experimenting with new ideas to achieve
better performance, for example by using &lt;a href=&quot;https:&#x2F;&#x2F;sled.rs&#x2F;&quot;&gt;sled&lt;&#x2F;a&gt; as its database. The goal is
to make it as easy as possible to set up your own homeserver.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>These Weeks in Ruma</title>
        <author>
            <name>Jonas Platte</name>
        </author>
        <published>2019-12-14T00:00:00+00:00</published>
        <updated>2019-12-14T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/these-weeks-in-ruma-2019-12-14/" type="text/html"/>
        <id>https://www.ruma.io/news/these-weeks-in-ruma-2019-12-14/</id>
        <content type="html">&lt;p&gt;There&#x27;s been steady progress since the last news entry, so I thought I&#x27;d write a small progress
update again.&lt;&#x2F;p&gt;
&lt;p&gt;These crates saw a new release:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ruma-api-macros 0.9.0 (with an alpha beforehand)&lt;&#x2F;li&gt;
&lt;li&gt;ruma-api 0.12.0 (with an alpha beforehand)&lt;&#x2F;li&gt;
&lt;li&gt;ruma-client-api 0.5.0&lt;&#x2F;li&gt;
&lt;li&gt;ruma-client 0.3.0-beta.2&lt;&#x2F;li&gt;
&lt;li&gt;ruma-identifiers 0.14.1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-changed&quot;&gt;What changed?&lt;&#x2F;h2&gt;
&lt;p&gt;The biggest thing that changed is that the temporary non-support of server-side usage of ruma-api
that I wrote about last time has ended. Restoring server-side support also required some changes to
ruma-client-api, but those were rather minimal because all of the additional logic that deals with
the client &#x2F; server side distinction is hidden away in ruma-api(-macros).&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, ruma-client now has no more dependencies with alpha or beta versions, and will have its
0.3.0 release soon (pending a small update from hyper). ruma-identifiers now supports historical
user IDs, which are user IDs can&#x27;t actually be created on a matrix homeserver because they contain
invalid characeters, but nevertheless have to be supported because older versions of the
specification allowed these characters and as such some users still have them in their IDs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;server-side-support&quot;&gt;Server-side support&lt;&#x2F;h2&gt;
&lt;p&gt;To support fallible deserialization on both ends of the protocol, the request-sending &#x2F;
response-receiving side (when dealing with the client-server protocl, this is the client) and the
request-receiving &#x2F; response-sending side (the server) now use different types if request or
response structs contain events. For every &lt;code&gt;Request&lt;&#x2F;code&gt; or &lt;code&gt;Response&lt;&#x2F;code&gt; that contains an event (or
another struct that contains another struct that contains a &lt;code&gt;Vec&lt;&#x2F;code&gt; of events and such) we now
generate a corresponding &lt;code&gt;IncomingRequest&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;IncomingResponse&lt;&#x2F;code&gt;. The non-&lt;code&gt;Incoming&lt;&#x2F;code&gt; structs don&#x27;t
use ruma-events&#x27; &lt;code&gt;EventResult&lt;&#x2F;code&gt; type, while the &lt;code&gt;Incoming&lt;&#x2F;code&gt; types do.&lt;&#x2F;p&gt;
&lt;p&gt;For details about how these new structs are generated, see the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;ruma-api&#x2F;0.12.0&#x2F;ruma_api&#x2F;derive.Outgoing.html&quot;&gt;documentation for the new &lt;code&gt;Outgoing&lt;&#x2F;code&gt;
derive macro&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>New releases</title>
        <author>
            <name>Jonas Platte</name>
        </author>
        <published>2019-11-05T00:00:00+00:00</published>
        <updated>2019-11-05T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/new-releases-2019-11-05/" type="text/html"/>
        <id>https://www.ruma.io/news/new-releases-2019-11-05/</id>
        <content type="html">&lt;p&gt;Last week, we uploaded 7 (!) new versions of our crates to crates.io:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ruma-events-macros 0.2.0&lt;&#x2F;li&gt;
&lt;li&gt;ruma-events 0.15.0&lt;&#x2F;li&gt;
&lt;li&gt;ruma-events 0.15.1 (bugfix release because ruma-events 0.15.0 was released a tad too early)&lt;&#x2F;li&gt;
&lt;li&gt;ruma-api-macros 0.8.0&lt;&#x2F;li&gt;
&lt;li&gt;ruma-api 0.11.0&lt;&#x2F;li&gt;
&lt;li&gt;ruma-client-api 0.4.0&lt;&#x2F;li&gt;
&lt;li&gt;ruma-client 0.3.0-beta.1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-changed&quot;&gt;What changed?&lt;&#x2F;h2&gt;
&lt;p&gt;A quick overview:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ruma-events 0.15 improves event deserialization and validation&lt;&#x2F;li&gt;
&lt;li&gt;the latest ruma-api &amp;amp; ruma-client-api are only useable for implementing client-side stuff, server-side functionality will be added back in a later release&lt;&#x2F;li&gt;
&lt;li&gt;ruma-client 0.3.0-beta.1 supports async&#x2F;await, the final version will be published after its dependencies are final too&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And now to the technical details...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fallible-event-deserialization&quot;&gt;Fallible event deserialization&lt;&#x2F;h2&gt;
&lt;p&gt;The most important change is one in ruma-events, and it is &lt;em&gt;the&lt;&#x2F;em&gt; reason all of the other crates saw a new release too. ruma-events 0.15.0 introduces a type &lt;code&gt;EventResult&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, which is almost the same as &lt;code&gt;Result&amp;lt;T, ruma_events::InvalidEvent&amp;gt;&lt;&#x2F;code&gt; (and it is in fact convertible to that) but with one important difference: It implements &lt;code&gt;serde::Deserialize&lt;&#x2F;code&gt; in a different way. Deserializing an &lt;code&gt;EventResult&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; almost always succeeds. It tries to deserialize the &lt;code&gt;T&lt;&#x2F;code&gt;, and if that fails, falls back to &lt;code&gt;serde_json::Value&lt;&#x2F;code&gt; deserialization. However, in contrast to the fallback one would get with &lt;code&gt;Result&amp;lt;T, serde_json::Value&amp;gt;&lt;&#x2F;code&gt; deserialization which is supported by serde directly, we also capture the error message from &lt;code&gt;T&lt;&#x2F;code&gt;s deserialization... or validation:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;event-validation&quot;&gt;Event validation&lt;&#x2F;h2&gt;
&lt;p&gt;I left out one detail in the previous section, and that is that the &lt;code&gt;T&lt;&#x2F;code&gt; in &lt;code&gt;EventResult&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; doesn&#x27;t actually need to implement &lt;code&gt;Deserialize&lt;&#x2F;code&gt;. Instead, it needs to implement &lt;code&gt;TryFromRaw&lt;&#x2F;code&gt;. This trait is very similar to &lt;code&gt;TryFrom&lt;&#x2F;code&gt; from the standard library, and in fact we would have used &lt;code&gt;TryFrom&lt;&#x2F;code&gt; directly, were it not for coherence issues¹. This trait is implemented for every event (content) type in ruma-events and allows conversion of a private raw version of that type, which does implement &lt;code&gt;Deserialize&lt;&#x2F;code&gt;, to the actual event (content) type. All of this is done to enable validation of events during deserialization, without having to write the actual deserialization code manually. There are currently few events that need this validation step after deserialization (most of the constraints the matrix spec puts on json fields beyond their types are captured in their Rust types, e.g. using &lt;code&gt;UserId&lt;&#x2F;code&gt; instead of &lt;code&gt;String&lt;&#x2F;code&gt;), but it is nevertheless useful to have the required mechanisms in place.&lt;&#x2F;p&gt;
&lt;p&gt;¹ &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;55437&quot;&gt;RFC 2451&lt;&#x2F;a&gt; &amp;quot;Re-Rebalancing Coherence&amp;quot; might allow us to switch to &lt;code&gt;TryFrom&lt;&#x2F;code&gt; in a future release, though I have not tested this yet&lt;&#x2F;p&gt;
&lt;h2 id=&quot;temporary-non-support-of-server-side-usage&quot;&gt;Temporary non-support of server-side usage&lt;&#x2F;h2&gt;
&lt;p&gt;Because of the whole fallible deserialization thing, we might not be able to use the same Rust types on both client &amp;amp; server anymore. Due to that and the server not being worked on currently, we decided to temporarily remove request deserialization and response serialization from ruma-api and ruma-api-macros, leaving request serialization and response deserialization, as needed for the client use case. This affects ruma-client-api as well, through its use of the aforementioned crates.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;async-await-in-ruma-client&quot;&gt;Async&#x2F;await in ruma-client&lt;&#x2F;h2&gt;
&lt;p&gt;As listed at the beginning, we published ruma-client 0.3.0-beta.1. This release supports &lt;code&gt;async&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;await&lt;&#x2F;code&gt; syntax in addition to using all the latest lower-level ruma crates. While &lt;code&gt;async&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;await&lt;&#x2F;code&gt; will become stable with Rust 1.39.0 on 2019-11-09, tokio 0.2.0 is expected to take some more time to come out, which will in turn affect hyper 0.13.0&#x27;s final release and thus our 0.3.0 release. Nevertheless, ruma-client 0.3.0-beta.1 can be used today on Rust beta or nightly.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2019-08-11T00:00:00+00:00</published>
        <updated>2019-08-11T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2019-08-11/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2019-08-11/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;I did another live stream of Ruma development on &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;jimmycuadra&quot;&gt;my Twitch channel&lt;&#x2F;a&gt; this past week.
If you missed it, you can watch &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vfMvGWCBkVI&quot;&gt;the recording on YouTube&lt;&#x2F;a&gt;.
In the stream, I worked on another revision to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt; API in which a special result type was introduced to handle deserialization&#x2F;validation errors.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&quot;&gt;Jonas&lt;&#x2F;a&gt; quickly discovered, upon trying to update &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&quot;&gt;ruma-client-api&lt;&#x2F;a&gt; to ruma-events 0.10, that the new deserialization API didn&#x27;t quite work and that further changes were needed.
I updated all the manually events to the &lt;em&gt;new&lt;&#x2F;em&gt; new API, but the events generated by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events-macros&quot;&gt;ruma-events-macros&lt;&#x2F;a&gt; still need to be updated.
I will do that on the next stream in the coming week.&lt;&#x2F;p&gt;
&lt;p&gt;A couple weeks ago I recorded an interview with the &lt;a href=&quot;https:&#x2F;&#x2F;rustacean-station.org&#x2F;&quot;&gt;Rustacean Station&lt;&#x2F;a&gt; podcast, and today the episode was released.
You can find it here: &lt;a href=&quot;https:&#x2F;&#x2F;rustacean-station.org&#x2F;episode&#x2F;001-ruma&#x2F;&quot;&gt;Ruma and the Matrix Communication Protocol: An Interview with Jimmy Cuadra&lt;&#x2F;a&gt;.
A huge thanks to Ben Striegel and Jon Gjengset for starting the podcast, and to Ben and Abdou Seck for taking the time to record this episode with me.
It was a good time, and I hope it gets some new people interested in Matrix and&#x2F;or Ruma.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2019-08-04T00:00:00+00:00</published>
        <updated>2019-08-04T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2019-08-04/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2019-08-04/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;I forgot to provide an update last week, so this week we&#x27;ve got two weeks of stuff to cover.
The revamp of ruma-events I mentioned several times previously was released as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;releases&#x2F;tag&#x2F;0.13.0&quot;&gt;0.13.0&lt;&#x2F;a&gt;, followed shortly by an update to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;releases&#x2F;tag&#x2F;0.14.0&quot;&gt;0.14.0&lt;&#x2F;a&gt; to bump the url crate (which is a re-exported dependency) to version 2.0.
When trying to integrate the new ruma-events into ruma-client-api, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&quot;&gt;Jonas&lt;&#x2F;a&gt; quickly discovered that it wasn&#x27;t actually possible, because API requests&#x2F;responses that contain events need to be deserialized, and can&#x27;t because the events don&#x27;t have a public implementation of &lt;code&gt;serde::Deserialize&lt;&#x2F;code&gt; anymore.
I felt like an idiot for not foreseeing this seemingly obvious problem, but that&#x27;s the way it goes sometimes.
I&#x27;ll be working on addressing this next week.&lt;&#x2F;p&gt;
&lt;p&gt;A new version of ruma-api, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;releases&#x2F;tag&#x2F;ruma-api-0.10.0&quot;&gt;0.10.0&lt;&#x2F;a&gt;, was released this week.
This release contains two significant changes:
The first is that the &lt;code&gt;Endpoint&lt;&#x2F;code&gt; trait has been revised to be implemented in terms of the endpoint&#x27;s request type, rather than having the request be specified via an associated type.
This creates a more straightforward mapping between request and response types for each endpoint, removes a bunch of unnecessary unit structs that were only used to link associated request and response types together, and lets us remove some use of the turbofish operator in ruma-client.
The second change in this release is that ruma-api-macros has been merged into the repo, and now exists in a Cargo workspace.
The &lt;code&gt;ruma_api&lt;&#x2F;code&gt; procedural macro is now included and re-export from ruma-api itself under a default feature.
The macro has also been updated to refer to its dependencies via a hidden module in ruma-api.
The result is that downstream crates like ruma-client-api no longer have to specify dependnecies on all the crates referenced by the code generated by the macro.&lt;&#x2F;p&gt;
&lt;p&gt;Another exiciting update:
This past week, both Jonas and I started live streaming our development on Twitch.
I made a &lt;a href=&quot;https:&#x2F;&#x2F;www.jimmycuadra.com&#x2F;posts&#x2F;twitch-live-streams-of-ruma-development&#x2F;&quot;&gt;separate post on my own blog&lt;&#x2F;a&gt; about this, but the short version is that I intend to live stream most of my work on Ruma from now on to help people learn about both Rust and Matrix.
You can find my live streams on &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;jimmycuadra&quot;&gt;my Twitch channel&lt;&#x2F;a&gt;, and you can watch the recordings of past streams on &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCnflGGv5ZM2kdn9RPb2NG6Q&quot;&gt;my YouTube channel&lt;&#x2F;a&gt;.
I&#x27;ll announce my streams in &lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;#ruma:matrix.org&quot;&gt;#ruma:matrix.org&lt;&#x2F;a&gt; as well as on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jimmycuadra&quot;&gt;my Twitter feed&lt;&#x2F;a&gt;.
Jonas&#x27;s live streams can be watched on &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;jplatte&quot;&gt;his Twitch channel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the last update, I mentioned that Ruma finally &lt;a href=&quot;https:&#x2F;&#x2F;liberapay.com&#x2F;ruma&#x2F;&quot;&gt;accepts donations via Liberapay&lt;&#x2F;a&gt;.
Thank you very much to the people who have already signed on to donate to the project!
I thought it wouldn&#x27;t hurt to mention again in case anyone missed it. :}&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2019-07-21T00:00:00+00:00</published>
        <updated>2019-07-21T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2019-07-21/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2019-07-21/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;This week I&#x27;d like to officially welcome &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&quot;&gt;Jonas Platte&lt;&#x2F;a&gt; as a member of the Ruma team.
Jonas has been involved in the project for a long time and has provided many significant contributions, both via code and via discussions about the project&#x27;s design.
Jonas is the original author of ruma-gtk, a graphical Matrix client built on ruma-client, which later became &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fest-im&#x2F;fest&quot;&gt;Fest&lt;&#x2F;a&gt;, which in turn was forked to create &lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Apps&#x2F;Fractal&quot;&gt;Fractal&lt;&#x2F;a&gt;.
Thank you very much for all your work, Jonas!&lt;&#x2F;p&gt;
&lt;p&gt;A new addition to the website this week is the &lt;a href=&quot;&#x2F;contributing&#x2F;&quot;&gt;how to contribute&lt;&#x2F;a&gt; page, which offers an entry point for anyone interested in contributing to the project&#x27;s software.
Thank you to everyone who has expressed interest in contributing in the past (and for everyone who will in the future!)
Hopefully this guide will help you get started and give you some ideas for how to help.&lt;&#x2F;p&gt;
&lt;p&gt;On several occasions I&#x27;ve been asked if there is a way to donate financially to the project.
I&#x27;m happy to report that Ruma now &lt;a href=&quot;https:&#x2F;&#x2F;liberapay.com&#x2F;ruma&#x2F;&quot;&gt;accepts donations via Liberapay&lt;&#x2F;a&gt;.
Donations to the project will be divided amongst team members, which as of today consists of only Jonas and me, but will hopefully grow over time.
In the past I was hesitant to accept donations because I didn&#x27;t want financial interest to affect (or have the appearance of affecting) my decisions about the project.
I am building Ruma because I think the world needs Matrix, not as a way to support myself.
Being able to share donations to Ruma with other developers makes me much more comfortable with accepting donations.
It serves both to dilute my own financial interest in the project as well as to provide benefit in a way that&#x27;s more in tune with the project&#x27;s goals: making the world better for all of us.
For anyone that decides to support the project on Liberapay, I offer my most sincere thanks.&lt;&#x2F;p&gt;
&lt;p&gt;As for the software itself, the main update this week is that the revamp of ruma-events I&#x27;ve been working on for the past month is complete and has been merged into the master branch.
I still need to do one quick pass over everything to be sure I didn&#x27;t make any obvious mistakes, but once that&#x27;s done it will be ready for a new release.
As part of this revamp, a new supporting crate, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events-macros&quot;&gt;ruma-events-macros&lt;&#x2F;a&gt; also had its first release this week.
Like ruma-api-macros, it&#x27;s really only used as an internal dependency for the project, and doesn&#x27;t have much use to other developers directly.
But it could be interesting to look at if you want an example of a real-world procedural macro.&lt;&#x2F;p&gt;
&lt;p&gt;There was also a new release of ruma-api, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&#x2F;releases&#x2F;tag&#x2F;0.9.0&quot;&gt;version 0.9.0&lt;&#x2F;a&gt;, which revises the API to support the upcoming futures 0.3, ironically by removing the dependency on futures entirely.
This release also removes the library&#x27;s dependency on hyper, as it&#x27;s always been a goal for the foundational Ruma libraries to allow other developers to build Matrix software with other HTTP libraries if they wish.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;riot.im&#x2F;&quot;&gt;Riot&lt;&#x2F;a&gt;, the flagship Matrix client, &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@RiotChat&#x2F;%EF%B8%8Fmessage-editing-%EF%B8%8F-reactions-5cffec8f71a2&quot;&gt;released version 1.3&lt;&#x2F;a&gt; this week, which includes the ability to edit sent messages, and to add reactions to messages.
Both of these features are highly requested and bring Riot in line with other high-profile collaboration software.&lt;&#x2F;p&gt;
&lt;p&gt;Other notable news is the announcement to get &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;dendrite&quot;&gt;Dendrite&lt;&#x2F;a&gt;, a Matrix homeserver written in Go, into a state where it can have some practical use for Matrix users.
The first goal is for it to support enough functionality to be used for Matrix bots.
Read more about this announcement on &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;blog&#x2F;2019&#x2F;07&#x2F;19&#x2F;this-week-in-matrix-2019-07-19&quot;&gt;the lastest This Week in Matrix&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2019-07-14T00:00:00+00:00</published>
        <updated>2019-07-14T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2019-07-14/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2019-07-14/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;news&#x2F;this-week-in-ruma-2019-07-07&#x2F;&quot;&gt;last update&lt;&#x2F;a&gt;, I mentioned that the ongoing ruma-events revamp was impeded by an issue with types from &lt;em&gt;ring&lt;&#x2F;em&gt; which don&#x27;t implement &lt;code&gt;Clone&lt;&#x2F;code&gt; and &lt;code&gt;PartialEq&lt;&#x2F;code&gt;.
It turns out that there is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;briansmith&#x2F;ring&#x2F;pull&#x2F;727&quot;&gt;a reasonable explanation for this&lt;&#x2F;a&gt;, and so it was decided to work around it.
I restructured the ruma-signatures types in question so that they don&#x27;t contain &lt;em&gt;ring&lt;&#x2F;em&gt; types, but simply construct them and use them as-needed in the relevant methods.&lt;&#x2F;p&gt;
&lt;p&gt;While I was working on ruma-signatures, I decided to fill in the missing functionality—signing and verifying events.
In the process of doing that, I ended up with a significantly revised API for the crate, which has now been released as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-signatures&#x2F;releases&#x2F;tag&#x2F;0.5.0&quot;&gt;version 0.5.0&lt;&#x2F;a&gt;.
In a somewhat amusing development, the new ruma-signatures API doesn&#x27;t include the &lt;code&gt;Signatures&lt;&#x2F;code&gt; and &lt;code&gt;SignatureSet&lt;&#x2F;code&gt; types that were causing the issue in ruma-events in the first place.
As a result, ruma-events is not only unblocked, but doesn&#x27;t have depend on ruma-signatures at all.&lt;&#x2F;p&gt;
&lt;p&gt;I made a little bit more progress on ruma-events.
There is only one module remaining to be updated to the new API, so we&#x27;re on the home stretch for a new ruma-events release.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2019-07-07T00:00:00+00:00</published>
        <updated>2019-07-07T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2019-07-07/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2019-07-07/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;Work continues on the major revamp of ruma-events &lt;a href=&quot;&#x2F;news&#x2F;this-week-in-ruma-2019-06-23&#x2F;&quot;&gt;mentioned in the last update&lt;&#x2F;a&gt;.
Only a few modules remain to be converted to the new API.
It&#x27;s not hard work, but it&#x27;s a bit tedious, so I&#x27;ve been dragging on getting it done.
There are also a few modules that are somewhat blocked on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;briansmith&#x2F;ring&#x2F;issues&#x2F;859&quot;&gt;an issue in &lt;em&gt;ring&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;.
Some of the types in ruma-events contain types from ruma-signatures which don&#x27;t implement &lt;code&gt;Clone&lt;&#x2F;code&gt; and &lt;code&gt;PartialEq&lt;&#x2F;code&gt; because they contain types from &lt;em&gt;ring&lt;&#x2F;em&gt; which don&#x27;t.
I want all event types in ruma-events to implement these traits.
I say this issue is &amp;quot;somewhat blocked&amp;quot; because I could always just modify ruma-events-macros to derive these traits conditionally and then just leave them out for the few types in question, but this would be an unfortunate workaround, so I&#x27;d prefer to have the issue solved upstream.
Unfortunately, the issue hasn&#x27;t received a reply from any maintainers since I opened it a few weeks ago.
No hard feelings—that&#x27;s how open source works sometimes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-at-large&quot;&gt;Rust at large&lt;&#x2F;h2&gt;
&lt;p&gt;The big news in Rust since the last update is that &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2019&#x2F;07&#x2F;04&#x2F;Rust-1.36.0.html&quot;&gt;Rust 1.36 was released&lt;&#x2F;a&gt;, and it includes stabilization of the &lt;code&gt;Future&lt;&#x2F;code&gt; trait, one of the long-awaited building blocks for first-class async support in Rust.
As readers probably already know, the biggest reason for Ruma&#x27;s development hiatus is waiting for async networking in Rust to mature, and this is one of the final pieces of foundational support we&#x27;ve been waiting for.
The remaining pieces are &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;await&lt;&#x2F;code&gt; syntax, which is expected in either the next version or the one following it, and finally, waiting for important libraries like Hyper and Tokio, as well as web frameworks, to adopt the new stuff.
I also consider &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;2071&quot;&gt;support for &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in traits&lt;&#x2F;a&gt; to be an important feature that is not yet supported, but at this point Ruma doesn&#x27;t seem to need this, so while it&#x27;s a major missing component of Rust&#x27;s async support, it doesn&#x27;t seem likely to block Ruma development.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2019-06-23T00:00:00+00:00</published>
        <updated>2019-06-23T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2019-06-23/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2019-06-23/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;This week was spent working on a big revamp of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;, the library that defines Rust types for the &amp;quot;events&amp;quot; used in Matrix.
The previous week, I did a pass through the entire library to bring it up to date with version r0.5.0 of the Matrix specification.&lt;&#x2F;p&gt;
&lt;p&gt;After some discussion in &lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;#ruma:matrix.org&quot;&gt;#ruma:matrix.org&lt;&#x2F;a&gt;, I decided to make a move towards treating ruma-events as a higher-level library.
Previously, ruma-events has more or less offered Rust types that are exact representations of the JSON structures used by Matrix.
However, by representing events this way, it would be possible for users to easily create values that, while valid JSON, would be invalid events according to the specification.&lt;&#x2F;p&gt;
&lt;p&gt;The way we&#x27;re approaching this problem is by separating serialization&#x2F;deserialization of JSON from validation of events.
Rather than directly implementing &lt;code&gt;serde::Deserialize&lt;&#x2F;code&gt;, event types will be converted from a string of JSON data using &lt;code&gt;std::str::FromStr&lt;&#x2F;code&gt;.
This implementation will deserialize the data internally and then validate it, returning either a valid event, or a raw &lt;code&gt;serde_json::Value&lt;&#x2F;code&gt; along with an error message about why the event was invalid.
The latter form is necessary because invalid events will always be present in the Matrix system, created via bugs or other problems in homeserver implementations.
Once an event is in the event graph, other servers will receive these invalid events over federation, and must still persist them and deal with them as they are.&lt;&#x2F;p&gt;
&lt;p&gt;Similar to the new interface around deserialization, the serialized form of an event created by ruma-events may not directly match the structure of the Rust type.
ruma-events will instead expose variants of each event to ensure they can only be created in valid states.&lt;&#x2F;p&gt;
&lt;p&gt;To reduce the boilerplate that this approach necessarily causes (because for many events there will now be two structures: the public one and the private one used for converting to and from JSON), I started a new procedural macro, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events-macros&quot;&gt;ruma-events-macros&lt;&#x2F;a&gt;, to make the most common cases require minimal code in ruma-events.
It&#x27;s been a lot of work, and there&#x27;s still probably another week or more to go to finish implementing ruma-events using the new approach.
But when it&#x27;s done, the result will be a Rust library for Matrix events that leaves less room for users to accidentally do the wrong thing, while also supporting interoperation with other Matrix software that isn&#x27;t so strict.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2019-06-16T00:00:00+00:00</published>
        <updated>2019-06-16T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2019-06-16/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2019-06-16/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;Work is underway to bring Ruma up to date with &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;docs&#x2F;spec&#x2F;client_server&#x2F;r0.5.0&quot;&gt;version r0.5.0&lt;&#x2F;a&gt; of the Matrix specification.
Starting with the most foundational libraries and working up towards the higher-level ruma-client, this work should be done in the next week or two.
The bulk of the work since the last update has been on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;, adding all of the events that were previously missing, and doing a full pass through existing events to make sure our definitions match the specification.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, community members Florian and Luca identified &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;issues&#x2F;27&quot;&gt;an issue&lt;&#x2F;a&gt; regarding the use of Rust&#x27;s &lt;code&gt;u64&lt;&#x2F;code&gt; and &lt;code&gt;i64&lt;&#x2F;code&gt; for numeric values and potential interoperability problems with JavaScript.
After some discussion, Ruma team member jplatte created a new crate called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&#x2F;js_int&quot;&gt;js_int&lt;&#x2F;a&gt; to address this.
It has already been integrated with ruma-client-api and ruma-events, and will be used for all integer values in Ruma from now on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-api&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&quot;&gt;ruma-api&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Released &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&#x2F;releases&#x2F;tag&#x2F;0.8.0&quot;&gt;version 0.8.0&lt;&#x2F;a&gt;.
&lt;ul&gt;
&lt;li&gt;Simplified the &lt;code&gt;Error&lt;&#x2F;code&gt; type.&lt;&#x2F;li&gt;
&lt;li&gt;Updated to the latest ruma-identifiers (0.13).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-api-macros&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api-macros&quot;&gt;ruma-api-macros&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Released &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api-macros&quot;&gt;version 0.5.0&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Generated documentation now includes the names and descriptions of API endpoints.&lt;&#x2F;li&gt;
&lt;li&gt;Updated to the latest ruma-api (0.5).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-client-api&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&quot;&gt;ruma-client-api&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Integrated the new &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&#x2F;js_int&quot;&gt;js_int&lt;&#x2F;a&gt; crate to ensure numeric types conform to the requirements stated in the specification.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added new events and updated existing events to cover everything in version r0.5.0 of the client-server specification.
Notably, this includes events for end-to-end encryption and push notifications.&lt;&#x2F;li&gt;
&lt;li&gt;Integrated the new &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&#x2F;js_int&quot;&gt;js_int&lt;&#x2F;a&gt; crate to ensure numeric types conform to the requirements stated in the specification.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Released &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&#x2F;releases&#x2F;tag&#x2F;0.13.0&quot;&gt;version 0.13.0&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EventId::hostname&lt;&#x2F;code&gt; and &lt;code&gt;EventId::port&lt;&#x2F;code&gt; now return &lt;code&gt;Option&lt;&#x2F;code&gt; because they are only applicable for the original event ID format.&lt;&#x2F;li&gt;
&lt;li&gt;All methods named &lt;code&gt;opaque_id&lt;&#x2F;code&gt; are now named &lt;code&gt;localpart&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;EventId&lt;&#x2F;code&gt; now supports multiple formats according to the different &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;docs&#x2F;spec&#x2F;#room-versions&quot;&gt;room versions&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;RoomVersionId&lt;&#x2F;code&gt; was added.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DeviceId&lt;&#x2F;code&gt; and a function for generating a &lt;code&gt;DeviceId&lt;&#x2F;code&gt; were added.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Released &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&#x2F;releases&#x2F;tag&#x2F;0.13.1&quot;&gt;version 0.13.1&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Added support for room version 5 with &lt;code&gt;RoomVersionId::version_5&lt;&#x2F;code&gt; and &lt;code&gt;RoomVersionId::is_version_5&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;In the last post I mentioned that Matrix 1.0 was coming soon, and it has now happened!
A hearty congratulations to everyone who works on Matrix!
This is a huge milestone.
You can read the details about Matrix 1.0, as well as the new Matrix.org Foundation, over on the Matrix blog: &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;blog&#x2F;2019&#x2F;06&#x2F;11&#x2F;introducing-matrix-1-0-and-the-matrix-org-foundation&quot;&gt;Introducing Matrix 1.0 and the Matrix.org Foundation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2019-06-02T00:00:00+00:00</published>
        <updated>2019-06-02T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2019-06-02/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2019-06-02/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;Ruma has largely been on hiatus while we wait for async networking in Rust to mature.
We now have a &lt;a href=&quot;https:&#x2F;&#x2F;www.ruma.io&#x2F;status&#x2F;&quot;&gt;project status page&lt;&#x2F;a&gt; which gives the full story.
Please refer people here if they wonder about the project&#x27;s activity.&lt;&#x2F;p&gt;
&lt;p&gt;The stabilization of async&#x2F;await syntax is now on the horizon, so this week I worked on bringing the Ruma homeserver up to date.
I updated all its dependencies to their latest versions, which took a bit of work, primarily due to updating from pre-1.0 Diesel to Diesel 1.4, as well as some breaking changes in ruma-events.
The good news is that the homeserver is now a Rust 2018 edition crate and compiles on stable Rust!
That means that the entire Ruma project is now running on stable Rust.&lt;&#x2F;p&gt;
&lt;p&gt;I made some other relatively minor updates to the other Ruma libraries, adding rustfmt and clippy to their builds and addressing lots of clippy warnings.
Several of the Ruma libraries now have substantially more internal documentation, which should help anyone who wants to work on them in the future.
ruma-client also has some new crate-level documentation which should make it much more friendly to new users.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;The Matrix team is getting ready to release 1.0 versions of the Matrix specifications.
This is great news, as it means things are going to stabilize.
When this happens, we&#x27;ll be able to bring the various Ruma libraries up to date without having to worry about any more major changes.
We&#x27;ll also begin implementing the other APIs (e.g. federation) after the 1.0 specs are released.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-at-large&quot;&gt;Rust at large&lt;&#x2F;h2&gt;
&lt;p&gt;As noted above, there is now an expected date for the stabilization of async&#x2F;await syntax.
It&#x27;s expected to become stable with the release of Rust 1.37 in August.
Once this happens, the Rust ecosystem will begin to adopt the new syntax, as well as the new version of futures provided by the standard library.
Eventually, the dust will settle, and we&#x27;ll be in a good position to choose a new web framework to replace Iron, which is what the Ruma homeserver currently uses but is no longer an active project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aledomu&quot;&gt;Alejandro Domínguez&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2018-12-09T00:00:00+00:00</published>
        <updated>2018-12-09T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2018-12-09/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2018-12-09/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s been more than a year since the last This Week in Ruma.
The project has been mostly on hiatus while waiting for revisions to the Matrix spec and maturity of the Rust ecosystem.
Ruma is not dead, however, and small improvements have continued over the last year.
The Matrix spec has advanced quite a bit and many of the blocking issues for Ruma have been resolved.
Rust&#x27;s maturity is another story.
async&#x2F;await is still under development and this is the most significant blocking issue to progress on Ruma.
For a longer analysis of why we&#x27;re waiting, &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;a42ojg&#x2F;the_fallow_year_my_rust2019_post&#x2F;ebb44e4&#x2F;&quot;&gt;this reddit comment&lt;&#x2F;a&gt; puts it very well.&lt;&#x2F;p&gt;
&lt;p&gt;The main announcement to make at this point is that there is now a &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;ruma-client&quot;&gt;crates.io release of ruma-client&lt;&#x2F;a&gt;, the high-level client library most developers will use to build Matrix-enabled software.&lt;&#x2F;p&gt;
&lt;p&gt;Thank you to all the new contributors since the last This Week in Ruma, and for everyone who has continued to show interest in the project despite the lull in development.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Johni0702&quot;&gt;Jonas Herzig&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;digitalatigid&quot;&gt;Digital&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;florianjacob&quot;&gt;Florian Jacob&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jo-so&quot;&gt;Jörg Sommer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;musoke&quot;&gt;Nathan Musoke&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neosam&quot;&gt;Simon Goller&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;noformnocontent&quot;&gt;noformnocontent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rschulman&quot;&gt;Ross Schulman&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;severen&quot;&gt;Severen Redwood&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tilpner&quot;&gt;Till Höppner&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2017-05-14T00:00:00+00:00</published>
        <updated>2017-05-14T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2017-05-14/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2017-05-14/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s been several months since the last This Week in Ruma.
There has been some work on Ruma during this time, but development has largely been on hiatus while we wait for the dust to settle on two things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Stabilization and release of hyper 0.11 (the tokio-based async rewrite).&lt;&#x2F;li&gt;
&lt;li&gt;A new version of the Matrix specification that includes the many changes since the current version.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The former has been in the &amp;quot;nearly done&amp;quot; state for a while now, so we&#x27;ve been doing a bit of development against hyper&#x27;s master branch.
As far as I know, no significant API changes are expected at this point.
The latter has been delayed significantly because the Matrix team has been up to their eyeballs in work on &lt;a href=&quot;https:&#x2F;&#x2F;riot.im&#x2F;&quot;&gt;Riot&lt;&#x2F;a&gt;, particularly in squashing issues with end-to-end encryption as they try to move it out of beta.
While we would like a new spec to help in moving Ruma forward, the Matrix team has our full support on their current priorities, as fully working encryption for messages is simply way more important for the world right now.&lt;&#x2F;p&gt;
&lt;p&gt;A change in the Ruma project worth noting is that I&#x27;ve decided to end my policy of &amp;quot;no new unstable features,&amp;quot; effectively deprioritizing moving Ruma&#x27;s crates to stable Rust.
The simple reaosn for this is that there are still unstable features that change what the ideal API for some of our crates would be.
Having the best possible API should take priority over which version of Rust is required, especially with how easy it is to install Rust with rustup.&lt;&#x2F;p&gt;
&lt;p&gt;Personally, I&#x27;ve been more focused on the client-side libraries recently.
The past week I&#x27;ve made a lot of progress on finalizing and implementing the API for ruma-api, ruma-client-api, and ruma-client.
In the last update back in February, I mentioned working on a custom derive to make the implementation of Matrix APIs easier.
That has evolved into a full Macros 2.0 procedural macro that offers a very succinct, declarative API that will make the client libraries much simpler.
This work is still very much in progress, but having finally figured out an approach for this is a big milestone in having a usable Matrix client library for Rust.
We&#x27;re excited to see what Rust developers build with it when it&#x27;s ready.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added the &lt;code&gt;&#x2F;rooms&#x2F;:room_id&#x2F;kick&lt;&#x2F;code&gt; API endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Added initial implementation for the room states in the &lt;code&gt;&#x2F;sync&lt;&#x2F;code&gt; API endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Corrected the structure of authentication parameters in login requests.&lt;&#x2F;li&gt;
&lt;li&gt;Fixed the behavior of the &lt;code&gt;next_batch&lt;&#x2F;code&gt; token when there are no new events for the &lt;code&gt;&#x2F;sync&lt;&#x2F;code&gt; API endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Added basic implementation for the pushers API endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Return empty JSON objects as the default response for Riot compatibility.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-api&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&quot;&gt;ruma-api&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Revised the API into a simpler form that specifies conversions between hyper&#x27;s types and its own.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Published versions 0.10.0 and then 0.11.0 with small changes, most notably updating to serde 1.0.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Published versions 0.7.0 and then 0.8.0 with small changes, most notably updating to serde 1.0.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;briansmith&quot;&gt;Brian Smith&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;call-for-participation&quot;&gt;Call for participation&lt;&#x2F;h2&gt;
&lt;p&gt;Interested in getting involved with Ruma?
Here are some good places to start:&lt;&#x2F;p&gt;
&lt;p&gt;Previously featured and still available:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;157&quot;&gt;Sending a m.room.member event again after changing avatar or displayname&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;10&quot;&gt;Bikeshed: Module names&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;110&quot;&gt;Implementing Event storage&#x2F;search with a timeseries database or a lucene indexed database&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;107&quot;&gt;Implement a rate-limiting middleware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also plenty of API endpoints that still need to be implemented.
Check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;homeserver&#x2F;blob&#x2F;master&#x2F;STATUS.md&quot;&gt;status document&lt;&#x2F;a&gt; for a list.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2017-02-19T00:00:00+00:00</published>
        <updated>2017-02-19T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2017-02-19/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2017-02-19/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;Progress on ruma-api and ruma-client-api, converting ruma-client-api over to the new approach ruma-api is using.
After converting several of the modules using macros, I decided to take another stab at using a macros 1.1 procedural macro for automatically implementing the details of each request and response type.
The result is the new &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api-derive&quot;&gt;ruma-api-derive&lt;&#x2F;a&gt;.
So far it handles only a couple of simple variations, but with some of the groundwork laid, it should be easier now to fill out the remaining functionality.
The result will be that ruma-client-api will be completely declarative, and won&#x27;t have to resort to manual trait implementation for a few odd cases that didn&#x27;t fit the pattern of the &amp;quot;macros by example&amp;quot; macros.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Updated Diesel to the 0.11 series.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Published version 0.9.0, which updates Diesel to the 0.11 series.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Published version 0.6.0, which updates ruma-identifiers to the 0.9 series.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;call-for-participation&quot;&gt;Call for participation&lt;&#x2F;h2&gt;
&lt;p&gt;Interested in getting involved with Ruma?
Here are some good places to start:&lt;&#x2F;p&gt;
&lt;p&gt;Previously featured and still available:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;157&quot;&gt;Sending a m.room.member event again after changing avatar or displayname&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;10&quot;&gt;Bikeshed: Module names&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;110&quot;&gt;Implementing Event storage&#x2F;search with a timeseries database or a lucene indexed database&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;107&quot;&gt;Implement a rate-limiting middleware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also plenty of API endpoints that still need to be implemented.
Check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;homeserver&#x2F;blob&#x2F;master&#x2F;STATUS.md&quot;&gt;status document&lt;&#x2F;a&gt; for a list.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2017-02-12T00:00:00+00:00</published>
        <updated>2017-02-12T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2017-02-12/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2017-02-12/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;Progress on the Ruma homeserver has slowed a bit while we wait for the next version of the Matrix specification to be published.
There have been some significant changes to Synapse (the reference implementation homeserver) and Riot (the flagship Matrix client) that are not yet reflected in the spec, and as such, releasing an initial version of Ruma would not be of much value since it could have significant breakage with Riot.&lt;&#x2F;p&gt;
&lt;p&gt;Progress on ruma-api, ruma-client-api, and ruma-client continues, however.
We&#x27;re pushing ahead on one of the new API designs (codenamed &amp;quot;Ralith&amp;quot; after the community member of the same name, whose ideas it is based on) and it&#x27;s working well so far.
You can see the in-progress &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&#x2F;pull&#x2F;9&quot;&gt;changes to ruma-api&lt;&#x2F;a&gt;, the in-progress &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;pull&#x2F;17&quot;&gt;changes to ruma-client-api&lt;&#x2F;a&gt;, and the in-progress &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&#x2F;ruma-client&#x2F;tree&#x2F;ralith&quot;&gt;changes to ruma-client&lt;&#x2F;a&gt; that we&#x27;re using to test out this new design.
Further review and comments on these changes are welcome!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added support for transaction IDs for event creation.&lt;&#x2F;li&gt;
&lt;li&gt;Added the &lt;code&gt;GET &#x2F;rooms&#x2F;:room_id&#x2F;state&lt;&#x2F;code&gt; endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Updated to the Macros 1.1 version of code generation crates.&lt;&#x2F;li&gt;
&lt;li&gt;Updated Serde to the 0.9 series and Diesel to the 0.10 series.&lt;&#x2F;li&gt;
&lt;li&gt;Added a version number field to Ruma&#x27;s configuration to allow for future changes to the schema.&lt;&#x2F;li&gt;
&lt;li&gt;Changed the behavior of the deprecated &lt;code&gt;&#x2F;tokenrefresh&lt;&#x2F;code&gt; endpoint to match the behavior of Synapse.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Published version 0.8.1, which adds missing Diesel trait implementations needed for the homeserver.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;euank&quot;&gt;Euan Kemp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;call-for-participation&quot;&gt;Call for participation&lt;&#x2F;h2&gt;
&lt;p&gt;Interested in getting involved with Ruma?
Here are some good places to start:&lt;&#x2F;p&gt;
&lt;p&gt;Previously featured and still available:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;157&quot;&gt;Sending a m.room.member event again after changing avatar or displayname&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;10&quot;&gt;Bikeshed: Module names&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;110&quot;&gt;Implementing Event storage&#x2F;search with a timeseries database or a lucene indexed database&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;107&quot;&gt;Implement a rate-limiting middleware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also plenty of API endpoints that still need to be implemented.
Check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;homeserver&#x2F;blob&#x2F;master&#x2F;STATUS.md&quot;&gt;status document&lt;&#x2F;a&gt; for a list.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2017-02-05T00:00:00+00:00</published>
        <updated>2017-02-05T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2017-02-05/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2017-02-05/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;With the recent death of my friend Tamara, and moving to a new home, I haven&#x27;t been able to give Ruma the attention I would&#x27;ve liked in the last few weeks.
The rest of the Ruma community is still helping to push things forward, and I thank them sincerely for that.
In particular, I have shared commit access to the master branch of most Ruma repositories with top contributors &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mujx&quot;&gt;mujx&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;farodin91&quot;&gt;farodin91&lt;&#x2F;a&gt;, both in recognition of their continued contributions to the project, the trust I have in them now, and my desire to grow the community and not be a blocker for progress on the project when I&#x27;m unavailable.
Congratulations and thank you to both of them!&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve had a lot of discussion over a major overhaul to the design of ruma-api.
The discussion began when &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neosam&quot;&gt;Simon Goller&lt;&#x2F;a&gt; proposed some code for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client&#x2F;pull&#x2F;1&quot;&gt;the first significant endpoint in ruma-client&lt;&#x2F;a&gt;.
It then continued in the Ruma room on Matrix, &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;5o89f6&#x2F;optional_associated_types&#x2F;&quot;&gt;a reddit post&lt;&#x2F;a&gt;, and a series of issues and pull requests against ruma-api:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&#x2F;issues&#x2F;6&quot;&gt;Potential API redesign to better handle endpoints without certain kinds of parameters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&#x2F;pull&#x2F;7&quot;&gt;Another potential API design merging the existing API with some of Ralith&#x27;s ideas&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&#x2F;pull&#x2F;8&quot;&gt;Yet another potential API design using generics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&#x2F;pull&#x2F;9&quot;&gt;Revision of the API based on Ralith&#x27;s ideas. &lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Right now we are leaning towards that last one being the one we choose, but we still want to try implementing some of ruma-client-api and ruma-client against it to see how well it works.
Feedback and participation in the discussion is most welcome!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added initial support for user presence.&lt;&#x2F;li&gt;
&lt;li&gt;ruma&#x27;s config file can now be indicated with an option to the CLI.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Published version 0.4.0, 0.4.1, and 0.5.0 to crates.io.&lt;&#x2F;li&gt;
&lt;li&gt;Updated serde to 0.9.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Published version 0.7.0 and 0.8.0 to crates.io.&lt;&#x2F;li&gt;
&lt;li&gt;Updated serde to 0.9, regex to 0.2, and url to 1.4.&lt;&#x2F;li&gt;
&lt;li&gt;Updated diesel to 0.10, though this seems to have caused &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;diesel-rs&#x2F;diesel&#x2F;issues&#x2F;562#issuecomment-277229425&quot;&gt;a regression&lt;&#x2F;a&gt;, and will be fixed soon.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yblein&quot;&gt;Yoann Blein&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;call-for-participation&quot;&gt;Call for participation&lt;&#x2F;h2&gt;
&lt;p&gt;Interested in getting involved with Ruma?
Here are some good places to start:&lt;&#x2F;p&gt;
&lt;p&gt;Previously featured and still available:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;157&quot;&gt;Sending a m.room.member event again after changing avatar or displayname&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;8&quot;&gt;Add missing documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;10&quot;&gt;Bikeshed: Module names&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;110&quot;&gt;Implementing Event storage&#x2F;search with a timeseries database or a lucene indexed database&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;107&quot;&gt;Implement a rate-limiting middleware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also plenty of API endpoints that still need to be implemented.
Check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;homeserver&#x2F;blob&#x2F;master&#x2F;STATUS.md&quot;&gt;status document&lt;&#x2F;a&gt; for a list.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2017-01-15T00:00:00+00:00</published>
        <updated>2017-01-15T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2017-01-15/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2017-01-15/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;This week I want to take a moment to talk about something personal.
My best friend, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;TamaraBoyens&quot;&gt;Tamara Boyens&lt;&#x2F;a&gt;, passed away last Friday, January 6, after more than a year of suffering from a spine injury and various related issues.
It&#x27;s been incredibly heartbreaking for everyone who loved her.
She was a friendly, lively person, and was genuinely interested in any topic you would talk to her about.
She and I talked online a lot—many hours every day, year after year.
This was especially true after we both moved away from the city where we met.
Because chatting online was the way we talked the most, we were always looking for a better chat system than what was available to us, and this was a large part of my initial motivation to get involved with Matrix and build Ruma.
I have &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma#dedication&quot;&gt;dedicated Ruma&lt;&#x2F;a&gt; to her memory.
I hope, once it reaches production quality, that it will help many people to strengthen their relationships and get the use out of it that Tamara and I no longer can.&lt;&#x2F;p&gt;
&lt;p&gt;And now, on with the project updates.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;POST &#x2F;rooms&#x2F;:room_id&#x2F;leave&lt;&#x2F;code&gt; endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Fixed intermittent deadlocks in the test suite.&lt;&#x2F;li&gt;
&lt;li&gt;All users in trusted private chats now have equal privileges.&lt;&#x2F;li&gt;
&lt;li&gt;Improved some error handling and factored out some duplicated logic.&lt;&#x2F;li&gt;
&lt;li&gt;Replaced some string fields with appropriate ruma-identifiers types.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Published version 0.3.0 to crates.io.&lt;&#x2F;li&gt;
&lt;li&gt;Added missing trait implementations for &lt;code&gt;PresenceState&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-client&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client&quot;&gt;ruma-client&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Began spiking out the API for this high-level Matrix client library.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-client-api&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&quot;&gt;ruma-client-api&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;The &amp;quot;supported versions&amp;quot; API endpoint has been moved into an &lt;code&gt;unversioned&lt;&#x2F;code&gt; module.&lt;&#x2F;li&gt;
&lt;li&gt;Converted path parameters in docs from colon-snake-case to brace-lower-camel-case&lt;&#x2F;li&gt;
&lt;li&gt;Updated to ruma-api 0.3.0.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-api&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&quot;&gt;ruma-api&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Published versions 0.2.0 and 0.3.0 to crates.io.&lt;&#x2F;li&gt;
&lt;li&gt;Added a &lt;code&gt;Deserialize + Serialize&lt;&#x2F;code&gt; constraint to &lt;code&gt;Endpoint::QueryParams&lt;&#x2F;code&gt;, for use with the serde_urlencoded crate.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Endpoint::router_path&lt;&#x2F;code&gt;&#x27;s return type changed from &lt;code&gt;String&lt;&#x2F;code&gt; to &lt;code&gt;&amp;amp;&#x27;static str&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Added new required methods to &lt;code&gt;Endpoint&lt;&#x2F;code&gt;: &lt;code&gt;name&lt;&#x2F;code&gt;, &lt;code&gt;description&lt;&#x2F;code&gt;, &lt;code&gt;requires_authentication&lt;&#x2F;code&gt;, and &lt;code&gt;rate_limited&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aurabindo&quot;&gt;Aurabindo J&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;magicienap&quot;&gt;Antoine Proulx&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;call-for-participation&quot;&gt;Call for participation&lt;&#x2F;h2&gt;
&lt;p&gt;Interested in getting involved with Ruma?
Here are some good places to start:&lt;&#x2F;p&gt;
&lt;p&gt;New:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;151&quot;&gt;Add an option to the CLI to supply the path to the config file&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;157&quot;&gt;Sending a m.room.member event again after changing avatar or displayname&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Previously featured and still available:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;8&quot;&gt;Add missing documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;10&quot;&gt;Bikeshed: Module names&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;110&quot;&gt;Implementing Event storage&#x2F;search with a timeseries database or a lucene indexed database&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;107&quot;&gt;Implement a rate-limiting middleware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also plenty of API endpoints that still need to be implemented.
Check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;homeserver&#x2F;blob&#x2F;master&#x2F;STATUS.md&quot;&gt;status document&lt;&#x2F;a&gt; for a list.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2017-01-01T00:00:00+00:00</published>
        <updated>2017-01-01T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2017-01-01/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2017-01-01/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;The last couple weeks have been very busy for Ruma, in spite of the holiday season!
We released another of the Ruma crates to crates.io, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;, which contains Rust types for all the events in the Matrix specification.
Events are the primary data structures that are exchanged in Matrix.
ruma-events makes it easy for client and server code to share the same representations of these events, and to convert them to JSON and back.
ruma-events was the first component of Ruma that was developed, so I&#x27;m very happy to see it reach a stable enough point to be published.
The Ruma homeserver had been using it as a Git dependency for a while, but now it&#x27;s at a good place to start using for client applications.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s also been a lot of contributions to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&quot;&gt;ruma-client-api&lt;&#x2F;a&gt;.
This crate contains types for the requests and responses for each of the API endpoints in Matrix&#x27;s client-server specification.
In the near future, it will replace the the request and response types currently used by the homeserver, and is already being used to spike out an implementation of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma-ruma-client&quot;&gt;ruma-client&lt;&#x2F;a&gt;, a high-level client library.&lt;&#x2F;p&gt;
&lt;p&gt;These Matrix libraries are part of the broader ecosystem and vision of the Ruma project.
Our goal is not only to build a Matrix homeserver, but to build a collection of Matrix libraries that developers can use to build high quality, interoperable Matrix-enabled software in Rust.
We recently launched a new &lt;a href=&quot;&#x2F;projects&#x2F;&quot;&gt;projects page&lt;&#x2F;a&gt; on the website that explains each library and how it relates to the others in detail.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added support for the room creation API endpoint&#x27;s &lt;code&gt;initial_state&lt;&#x2F;code&gt; parameter.&lt;&#x2F;li&gt;
&lt;li&gt;Implemented the API endpoints for filters.&lt;&#x2F;li&gt;
&lt;li&gt;Implemented partial support for the event synchronization API endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Implemented the API endpoint for joining a room with either its room ID or a room alias ID.&lt;&#x2F;li&gt;
&lt;li&gt;Improved error handling to reduce the amount of cloning.&lt;&#x2F;li&gt;
&lt;li&gt;Added missing Content-Type header for error responses.&lt;&#x2F;li&gt;
&lt;li&gt;Fixed a bug that used the wrong value for a user&#x27;s power levels in certain situations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Now published to crates.io.&lt;&#x2F;li&gt;
&lt;li&gt;Added missing variants of the &amp;quot;stripped&amp;quot; versions of events.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Released crate version 0.6.0, which includes a new &lt;code&gt;RoomIdOrAliasId&lt;&#x2F;code&gt; enum type for APIs that accept either form of Matrix room identifier.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-client-api&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&quot;&gt;ruma-client-api&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;All API endpoints except push notifications are now implemented.&lt;&#x2F;li&gt;
&lt;li&gt;Added links to the relevant section of the Matrix specification for each API endpoint.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-api&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-api&quot;&gt;ruma-api&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Created and published this small crate which contains core types that will be used by all Ruma crates that implement request and response types for the various Matrix APIs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-www-ruma-io&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma.github.io&quot;&gt;www.ruma.io&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added a new &lt;a href=&quot;&#x2F;projects&#x2F;&quot;&gt;projects page&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Added a script to determine new contributors to the project across all repositories.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;exul&quot;&gt;Andreas Brönnimann&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vberger&quot;&gt;Victor Berger&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;call-for-participation&quot;&gt;Call for participation&lt;&#x2F;h2&gt;
&lt;p&gt;Interested in getting involved with Ruma?
Here are some good places to start:&lt;&#x2F;p&gt;
&lt;p&gt;New:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;8&quot;&gt;Add missing documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;9&quot;&gt;Convert path parameters in docs from colon-snake-case to brace-lower-camel-case&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&#x2F;issues&#x2F;10&quot;&gt;Bikeshed: Module names&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Previously featured and still available:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;110&quot;&gt;Implementing Event storage&#x2F;search with a timeseries database or a lucene indexed database&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[bug] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;121&quot;&gt;Deadlock error while running test suite&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;107&quot;&gt;Implement a rate-limiting middleware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;132&quot;&gt;Protect against database concurrency bugs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also plenty of API endpoints that still need to be implemented.
Check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;homeserver&#x2F;blob&#x2F;master&#x2F;STATUS.md&quot;&gt;status document&lt;&#x2F;a&gt; for a list.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Year in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-12-31T00:00:00+00:00</published>
        <updated>2016-12-31T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-year-in-ruma-2016-12-31/" type="text/html"/>
        <id>https://www.ruma.io/news/this-year-in-ruma-2016-12-31/</id>
        <content type="html">&lt;p&gt;2016 was a fantastic year for the Ruma project.
Although the project began in 2015, 2016 is the first full calendar year of development on the project and most of the major developments happened this year.
I wanted to take a few moments to review what we&#x27;ve achieved, and what&#x27;s been going on in the Matrix and Rust communities as well.&lt;&#x2F;p&gt;
&lt;p&gt;As a developer with many previous open source projects, I&#x27;ve been amazed at the amount of interest in the project and the number of people who have contributed significant portions of the current code base.
I&#x27;m used to flying solo, but Ruma has very quickly grown into a group effort of which I am only one member.
As of the end of 2016, Ruma has 11 people who have contributed commits to one of our repositories.
This does not include people who have opened issues or the more than 250 members of &lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;#ruma:matrix.org&quot;&gt;#ruma:matrix.org&lt;&#x2F;a&gt; who have participated in discussions, asked questions, and generally shown support of or interest in the project.&lt;&#x2F;p&gt;
&lt;p&gt;I particularly want to mention and thank &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mujx&quot;&gt;mujx&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;farodin91&quot;&gt;farodin91&lt;&#x2F;a&gt;, who have contributed substantial amounts of code and functionality, including some of the more difficult APIs.
A while back I invited both of them to join the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;orgs&#x2F;ruma&#x2F;people&quot;&gt;Ruma organization&#x27;s members&lt;&#x2F;a&gt; to acknowledge their work and the importance of their involvement in the project.
Ruma would simply not be nearly as far along as it is without their help.
Thank you both!&lt;&#x2F;p&gt;
&lt;p&gt;While the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;milestone&#x2F;1&quot;&gt;0.1.0 release&lt;&#x2F;a&gt; of the Ruma homeserver did not quite make it in time for 2016, we got very close, and I expect to see it in the beginning of 2017.
It may seem that not much work was done if we were able to go the whole year without a release, but it&#x27;s important to recognize that Ruma is more than just the homeserver.
We&#x27;re developing several separate Rust crates covering various functionality of the Matrix system, all of which will be used in the homeserver itself.
Four of the Ruma crates were published to crates.io in 2016.
It&#x27;s been a goal from the beginning to extract as much independently useful functionality as possible from the homeserver so that developers have a great collection of libraries for developing Matrix applications in Rust.
We want to see Matrix succeed, and I think supporting the wider Matrix community with good development tools will be just as important as the homeserver in that regard.&lt;&#x2F;p&gt;
&lt;p&gt;Along with supporting Matrix on the software development side, another of Ruma&#x27;s goals is to help improve the Matrix specification.
Prior to Ruma, the reference implementation, Synapse, was the only real attempt to implement the entire spec.
Because much of the spec is derived from the behavior of Synapse, there are many places where the spec was unclear or even incorrect.
Having a new homeserver implementation driven by the spec helps the Matrix team clarify, correct, and improve many details all across the specification.
The team has mentioned that we will be seeing the r0.3.0 version of the spec sometime in the next few weeks, and we&#x27;re excited to see the new improvements.&lt;&#x2F;p&gt;
&lt;p&gt;Matrix itself has been growing in usage and becoming a more serious contender among the choices for modern messaging in 2016.
The flagship web-based Matrix client Vector came out of beta and was rebranded as &lt;a href=&quot;https:&#x2F;&#x2F;riot.im&#x2F;&quot;&gt;Riot&lt;&#x2F;a&gt;, bringing with it clients for desktop computers, iOS, and Android, as well.
Riot has been very well received and although still under heavy development, shows that there is a bright future for messaging that gives power and control back to users.
At the end of the year, Riot&#x27;s long-awaited end-to-end encryption feature went into beta.
Although there still some bugs and usability issues to work out, the beta is very usable.
I&#x27;ve been using it myself since the beta was announced with success.
The importance of an open end-to-end encrypted messaging system cannot be overstated.
The imminent r0.3.0 version of the spec will include all the new APIs for encryption key management that were added to Synapse to support end-to-end encryption.&lt;&#x2F;p&gt;
&lt;p&gt;Rust has seen an incredible amount of activity in 2016 as well.
Since there have already been many other articles on the topic, I will just mention that it&#x27;s a goal of Ruma to help increase interest and adoption of Rust, just like Matrix.
We want to be another name on the growing list of examples of Rust being used for high quality, production-ready software.
We want more people to learn what a joy Rust is to write, how well the ecosystem of tools and libraries work, and how involved and helpful the community is.
For the language itself, we want to help push more of the useful unstable features into stable Rust.
Most significantly, we&#x27;ve seen that happen this year with the impending stabilzation of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1681&quot;&gt;Macros 1.1&lt;&#x2F;a&gt;.
Ruma currently builds only on nightly Rust, and the most significant reason for that was our need to use the &amp;quot;custom derive&amp;quot; feature for both Serde (serialization) and Diesel (database ORM).
I wrote a blog post on my personal blog about my experiences with Rust earlier this year, and that was part of a series of public commentary on the topic that helped the Rust team to prioritize a short-term solution to the problem of needing nightly Rust for the very common task of serialization.
Now, only a few months later, the new system is expected to be stable in the upcoming Rust 1.15 release.
With the stabilization of Macros 1.1, Ruma is getting very, very close to being able to build on stable Rust.
The last remaining unstable feature is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1542&quot;&gt;try_from&lt;&#x2F;a&gt;.
It&#x27;s very likely that Ruma will be targeting stable Rust by the end of 2017.&lt;&#x2F;p&gt;
&lt;p&gt;I will close by saying thank you again to all Ruma&#x27;s contributors, to the whole Ruma community, to the Matrix community, and to the Rust community.
It&#x27;s very fun and rewarding to be working at the intersection of these two new and exciting technologies, building an application that is sorely needed for safe online communication in our modern age.
Thank you for all the achievements of 2016, and here&#x27;s to another great year!&lt;&#x2F;p&gt;
&lt;p&gt;— Jimmy Cuadra, Ruma project leader&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-12-11T00:00:00+00:00</published>
        <updated>2016-12-11T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-12-11/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-12-11/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;Another big milestone was reached this week: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-signatures&quot;&gt;ruma-signatures&lt;&#x2F;a&gt; became the second Ruma crate to be published to crates.io.
ruma-signatures is a stand-alone library for working with digital signatures used by the Matrix system.
It can be used by either client or server code, and is not specific to the Ruma homeserver, so anyone writing clients, servers, bots, or integrations for Matrix can use it.
One feature, the ability to sign Matrix events, is notably absent from this first release, mostly because Matrix&#x27;s federation specification is still unstable.
However, the library should still be useful as is.
Check out the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;ruma-signatures&quot;&gt;documentation&lt;&#x2F;a&gt; to learn how to use it.&lt;&#x2F;p&gt;
&lt;p&gt;The release of ruma-signatures also makes it possible to finish the last remaining task in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;, which was to update a struct field to use one of the types from ruma-signatures. ruma-events should see its first release to crates.io next week, further expanding Ruma&#x27;s contribution of independent Matrix libraries for the Rust ecosystem.
In turn, ruma-events&#x27;s release will unblock &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&quot;&gt;ruma-client-api&lt;&#x2F;a&gt;, which in turn will make it possible to begin implementing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client&quot;&gt;ruma-client&lt;&#x2F;a&gt;, which will be great for anyone looking to write a Matrix program in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Back in the Ruma homeserver, there are several pull requests waiting for review, so more API endpoints will be implemented soon!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Ruma&#x27;s internal error type&#x27;s API was improved using the &lt;a href=&quot;http:&#x2F;&#x2F;www.suspectsemantics.com&#x2F;blog&#x2F;2016&#x2F;11&#x2F;29&#x2F;the-into-trick&#x2F;&quot;&gt;Into&amp;lt;Option&amp;gt; trick&lt;&#x2F;a&gt; by a new contributor.&lt;&#x2F;li&gt;
&lt;li&gt;Another new contributor fixed a bug in the &lt;code&gt;GET &#x2F;_matrix&#x2F;client&#x2F;versions&lt;&#x2F;code&gt; endpoint, and made the crate&#x27;s manifest consistent with the program&#x27;s CLI.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;New types were added to support heterogeneous collections of events.&lt;&#x2F;li&gt;
&lt;li&gt;The types for the &lt;em&gt;m.room.member&lt;&#x2F;em&gt; event now use the &lt;code&gt;Signatures&lt;&#x2F;code&gt; type from ruma-signatures.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Released crate version 0.5.0, with supports the new 0.9 release of Diesel.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;anuragsoni&quot;&gt;Anurag Soni&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jstnlef&quot;&gt;Justin LeFebvre&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kyrias&quot;&gt;Johannes Löthberg&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And a belated contribution attribution to my coworker and friend, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rjfranco&quot;&gt;Ramiro Jr. Franco&lt;&#x2F;a&gt;, who did a bunch of work to get Ruma&#x27;s website started a while back.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;call-for-participation&quot;&gt;Call for participation&lt;&#x2F;h2&gt;
&lt;p&gt;Last week I included this new section, and intend to include it every week from now on, to highlight ways people interested in the project can contribute.
Writing code is not the only way to contribute.
Adding or improving documentation, doing code review, and participating in discussions are helpful too!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[discussion] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;110&quot;&gt;Implementing Event storage&#x2F;search with a timeseries database or a lucene indexed database&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[bug] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;121&quot;&gt;Deadlock error while running test suite&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;[feature] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;107&quot;&gt;Implement a rate-limiting middleware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also plenty of API endpoints that still need to be implemented.
Check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;homeserver&#x2F;blob&#x2F;master&#x2F;STATUS.md&quot;&gt;status document&lt;&#x2F;a&gt; for a list.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-12-04T00:00:00+00:00</published>
        <updated>2016-12-04T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-12-04/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-12-04/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;We had a very productive week, landing several pull requests, including a major revamp of ruma-events and new APIs.&lt;&#x2F;p&gt;
&lt;p&gt;A very important milestone was reached: The number of unstable Rust features Ruma uses was reduced from six to two!
Ruma was migrated to the new Macros 1.1 approach for custom derive, which meant we were able to drop the &lt;code&gt;custom_attribute&lt;&#x2F;code&gt;, &lt;code&gt;custom_derive&lt;&#x2F;code&gt;, and &lt;code&gt;plugin&lt;&#x2F;code&gt; features.
As part of the integration of the ruma-events revamp, &lt;code&gt;specialization&lt;&#x2F;code&gt; was also removed.
With &lt;code&gt;question_mark&lt;&#x2F;code&gt; now stable, Ruma uses only &lt;code&gt;proc_macro&lt;&#x2F;code&gt; (Macros 1.1, which will be stable in a few more releases) and &lt;code&gt;try_from&lt;&#x2F;code&gt;, which I hope to see movement on soon.
The day that Ruma can target stable Rust is approaching!&lt;&#x2F;p&gt;
&lt;p&gt;The revamp of ruma-events changed the design of the library, so each of the kinds of event in Matrix (events, room events, and state events) are now traits rather than structs with two generic parameters.
This change took quite a while, so I&#x27;m happy to have it finally integrated into Ruma.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added support for local room invitations.&lt;&#x2F;li&gt;
&lt;li&gt;Removed unstable features: &lt;code&gt;custom_attribute&lt;&#x2F;code&gt;, &lt;code&gt;custom_derive&lt;&#x2F;code&gt;, &lt;code&gt;plugin&lt;&#x2F;code&gt;, and &lt;code&gt;specialization&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Updated to Macros 1.1 versions of Serde and Diesel.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Event&lt;&#x2F;code&gt;, &lt;code&gt;RoomEvent&lt;&#x2F;code&gt;, and &lt;code&gt;StateEvent&lt;&#x2F;code&gt; are now traits.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Released crate version 0.4.3, a small bump to update dependencies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;call-for-participation&quot;&gt;Call for participation&lt;&#x2F;h2&gt;
&lt;p&gt;Here are a couple of items to check out if you&#x27;re interested in contributing to the project:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For implementation: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;115&quot;&gt;Implement the Into&amp;lt;Option&amp;gt; trick for ApiError.&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For review and discussion: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&#x2F;pull&#x2F;5&quot;&gt;Add types to support heterogeneous collections of events&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-11-27T00:00:00+00:00</published>
        <updated>2016-11-27T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-11-27/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-11-27/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s been several weeks since I published an update to This Week in Ruma.
I&#x27;ve been out of town for a lot of that time and too busy to give Ruma the time it deserves.
This hasn&#x27;t stopped Ruma&#x27;s contributors from moving forward, however!
There are several pull requests in various stages of completion and review.
It will likely to continue to be on the quiet side for Ruma through the remainder of the year, but don&#x27;t worry.
The project is not going away.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added support for user profiles.&lt;&#x2F;li&gt;
&lt;li&gt;New room aliases now properly generate an m.room.aliases event.&lt;&#x2F;li&gt;
&lt;li&gt;The construction of API endpoints and the various middleware they use has been refactored to use a trait and a macro.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-10-09T00:00:00+00:00</published>
        <updated>2016-10-09T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-10-09/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-10-09/</id>
        <content type="html">&lt;p&gt;Many thanks to Ruma&#x27;s contributors this week.
The status document is quickly going from red to green!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added support for listing the members of a room.&lt;&#x2F;li&gt;
&lt;li&gt;Added support for room-specific client configuration data.&lt;&#x2F;li&gt;
&lt;li&gt;Added a new custom error code for cases where the client submits an invalid parameter.&lt;&#x2F;li&gt;
&lt;li&gt;The creator of a room now automatically joins is.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-signatures&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-signatures&quot;&gt;ruma-signatures&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added a &lt;code&gt;Signature&lt;&#x2F;code&gt; type that is produced from a &lt;code&gt;SigningKey&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Added a &lt;code&gt;SignatureSet&lt;&#x2F;code&gt; type that works like a set but serializes to a map, which is how a homeserver&#x27;s signatures are represented in Matrix events.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-10-02T00:00:00+00:00</published>
        <updated>2016-10-02T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-10-02/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-10-02/</id>
        <content type="html">&lt;p&gt;Ruma had some major progress this week.
We&#x27;re getting ever closer to the first alpha release.
Ruma&#x27;s fantastic community contributed implementations for several new API endpoints, with more on the way.&lt;&#x2F;p&gt;
&lt;p&gt;On Friday I did my second live stream of Ruma development.
If you missed it, you can &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=gApgMPEwvSc&quot;&gt;watch the recording&lt;&#x2F;a&gt;.
In it, I work on a new crate, ruma-client-api, the purpose of which is to separate the request and response data types for each API endpoint from the homeserver so that the same types can be used by client code.
The general structure of the API has changed since the Friday screencast, and is coming together very nicely now.&lt;&#x2F;p&gt;
&lt;p&gt;And finally, a milestone was reached with ruma-events by converting the &lt;code&gt;Event&lt;&#x2F;code&gt;, &lt;code&gt;RoomEvent&lt;&#x2F;code&gt;, and &lt;code&gt;StateEvent&lt;&#x2F;code&gt; types from structs to traits, greatly simplifying the overall API, and paving the way for better generic treatment of the different event kinds in the Ruma homeserver.
Initially I thought it would require language support for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1546&quot;&gt;fields in traits&lt;&#x2F;a&gt;, but I managed to get almost the same effect with macros.
At least ergonomic enough that I&#x27;m comfortable stabilizing the current API without fields in traits, at least once I verify that it works well in the homeserver code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added support for deactivating an account.&lt;&#x2F;li&gt;
&lt;li&gt;Added support for joining a room.&lt;&#x2F;li&gt;
&lt;li&gt;Added support for listing the members of a room.&lt;&#x2F;li&gt;
&lt;li&gt;Cleaned up the way variable URL path parameters are handled, moving all the logic in to Iron middleware, and reducing the volume of code in each API&#x27;s handler function.&lt;&#x2F;li&gt;
&lt;li&gt;Squashed all database migrations into a single &amp;quot;prerelease&amp;quot; migration to make it easier for contributors to work on features requiring new tables concurrently, and because there is no need to have more than one migration per released version of Ruma.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-client-api&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-client-api&quot;&gt;ruma-client-api&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added this new crate to share the request and response types between client and server.&lt;&#x2F;li&gt;
&lt;li&gt;Overall API designed and types added for about a third of the Matrix client API functionality so far.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Event&lt;&#x2F;code&gt;, &lt;code&gt;RoomEvent&lt;&#x2F;code&gt;, and &lt;code&gt;StateEvent&lt;&#x2F;code&gt; are now traits, which unifies and simplifies the crate&#x27;s overall API.&lt;&#x2F;li&gt;
&lt;li&gt;Enums now implement &lt;code&gt;Display&lt;&#x2F;code&gt; and &lt;code&gt;FromStr&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-09-25T00:00:00+00:00</published>
        <updated>2016-09-25T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-09-25/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-09-25/</id>
        <content type="html">&lt;p&gt;On Friday, I live streamed myself working on Ruma for the first time.
I tweeted about it from my &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jimmycuadra&quot;&gt;personal account&lt;&#x2F;a&gt; and mentioned it in &lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;#ruma:matrix.org&quot;&gt;#ruma:matrix.org&lt;&#x2F;a&gt;, but otherwise didn&#x27;t publicize it.
A few people watched and helped work out the kinks with audio and video quality.
(Thank you to those who watched!)
I walked through the API endpoint for creating message events, explaining more or less line by line how the code works, then worked on implementing the API endpoint for creating state events.
The people who watched gave me good feedback, and I had a good time doing it, so I think I&#x27;ll start to stream some of my Ruma development regularly.
It will be at 1:00 PM Pacific Time on my &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;jimmy_cuadra&quot;&gt;Twitch channel&lt;&#x2F;a&gt;.
I will start tweeting about it from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ruma_io&quot;&gt;Ruma&#x27;s Twitter account&lt;&#x2F;a&gt; to remind everyone.
I&#x27;d love to get some questions during the stream, so if you&#x27;re interested in learning about Matrix, Rust, or both, please come watch and tell me what you want to know!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added initial support for the state event creation API endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Filled in missing functionality and fixed a few issues with the room alias API endpoints, which checks those off the list completely.&lt;&#x2F;li&gt;
&lt;li&gt;A new contributor is working on the API endpoint for joining a room, and in the process added a new Iron middleware for extracting a &lt;code&gt;ruma_identifiers::RoomId&lt;&#x2F;code&gt; from the URL path parameter wherever it&#x27;s required.&lt;&#x2F;li&gt;
&lt;li&gt;A small quality of life fix: &lt;code&gt;script&#x2F;cargo&lt;&#x2F;code&gt; now passed the value of &lt;code&gt;RUST_LOG&lt;&#x2F;code&gt; to the Docker environment when developing.&lt;&#x2F;li&gt;
&lt;li&gt;The project&#x27;s README now includes some more information about how to determine which version of nightly Rust Ruma is built against for those not using Docker for development.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;farodin91&quot;&gt;Jan Jansen&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-09-18T00:00:00+00:00</published>
        <updated>2016-09-18T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-09-18/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-09-18/</id>
        <content type="html">&lt;p&gt;Apologies for the lack of updates the last two weeks!
Two weeks ago I had family visiting over the weekend and last weekend I was in Portland for the first ever RustConf, which was fantastic!&lt;&#x2F;p&gt;
&lt;p&gt;In addition to the changes below, I&#x27;ve been working on transaction support for the message event creation API.
It looks like it&#x27;s going to require a few features that are not yet supported by Diesel: &lt;code&gt;SET TRANSACTION&lt;&#x2F;code&gt; and tables with composite primary keys.
These are already on the roadmap for Diesel, so more progress will be made on this front soon.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Some changes to error handling to be more ergonomic, provide better user-facing error messages, and to follow Rust conventions better.&lt;&#x2F;li&gt;
&lt;li&gt;Added information to the project&#x27;s README about how to develop without Docker.&lt;&#x2F;li&gt;
&lt;li&gt;Added integration tests for the message event creation API, which uncovered a bug that is now fixed.&lt;&#x2F;li&gt;
&lt;li&gt;The room alias creation API now correctly returns a 409 HTTP status code if the alias already exists.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jplatte&quot;&gt;Jonas Platte&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-at-large&quot;&gt;Rust at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Talked with Niko Matsakis at RustConf and concluded that the functionality proposed in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1546&quot;&gt;RFC 1546&lt;&#x2F;a&gt; will be necessary for ruma-events to define the different kinds of Matrix events as traits instead of structs.
I added a somewhat rambly explanation of this in the comments on the RFC.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;The Matrix client Vector has come out of beta and has been rebranded as &lt;a href=&quot;https:&#x2F;&#x2F;riot.im&#x2F;&quot;&gt;Riot&lt;&#x2F;a&gt;!
End-to-end encrypted messages are finally here!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-08-28T00:00:00+00:00</published>
        <updated>2016-08-28T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-08-28/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-08-28/</id>
        <content type="html">&lt;p&gt;Recently, types from the ruma-identifiers crate were integrated into ruma-events and ruma, so that values representing a Matrix ID can guarantee some important invariants.
Previously these values were just strings.
There was still a source of confusion and errors in that the ID types had to be converted to and from strings for the structs that represent database records using the Diesel ORM.
To fix this, I added the necessary implementations to ruma-identifiers (under the &amp;quot;diesel&amp;quot; feature) so that the ID types can serve directly as the database columns&#x27; data types.
Of course, these are still stored as text in the database, but the conversion happens only during data serialization and deserialization, and so cannot be broken by application logic.
This was a pretty hairy change and it took a while to get it all working and to get the test suite updated and passing.
Big thanks to Sean Griffin (author of Diesel) for helping me figure out how to achieve this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Increase the portability of the Cargo wrapper script.&lt;&#x2F;li&gt;
&lt;li&gt;Use ruma-identifiers ID types for relevant database columns.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Crate version 0.4.0 and then 0.4.1 were released, adding Diesel integration and a bug fix for case-sensitivity in user IDs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SShrike&quot;&gt;Severen Redwood&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-at-large&quot;&gt;Rust at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Sean Griffin shared &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;sgrif&#x2F;92809819185a4077e919aaf0a607c6ef&quot;&gt;some details&lt;&#x2F;a&gt; of generic implementations that don&#x27;t work right now, but ideally could help make it easier for apps to create their own custom Diesel data types.&lt;&#x2F;li&gt;
&lt;li&gt;An important step for the future prospects of moving Ruma to stable Rust, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;35957&quot;&gt;implementation for macros 1.1&lt;&#x2F;a&gt; will land soon.
This will allow Diesel and Serde to use custom derive without requiring nightly features, which is one of the main reasons Ruma targets nightly Rust.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-08-21T00:00:00+00:00</published>
        <updated>2016-08-21T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-08-21/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-08-21/</id>
        <content type="html">&lt;p&gt;Apologies for the missed update last week!
I was sick and didn&#x27;t get a chance to write it.
However, there was work on the project last week.
I will just include those changes in this update.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&quot;&gt;ruma&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Previous work to update Diesel and Serde to the latest versions have been completed.&lt;&#x2F;li&gt;
&lt;li&gt;Ruma now uses the types from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt; to represent Matrix IDs instead of strings.&lt;&#x2F;li&gt;
&lt;li&gt;Ruma now uses the latest version of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt; which also uses ruma-identifiers.&lt;&#x2F;li&gt;
&lt;li&gt;The Docker Compose file now locks the Ruma development image to a specific version, so breaking changes to the image are now coordinated with Ruma.
As part of the same change, the image is now locked to a specific version of the nightly compiler.&lt;&#x2F;li&gt;
&lt;li&gt;Database migrations are now embedded in the ruma binary, which means a check out of the source code is no longer necessary.&lt;&#x2F;li&gt;
&lt;li&gt;Add initial support for the message event creation API.
This is a big milestone and one of the core APIs that makes Matrix work!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added simple type aliases for custom events of each kind (basic, room, and state events).&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m experimenting again with a version of the API where the event kinds are traits instead of generic structs.
They really feel like they should be traits, but the actual usage pattern for the events in the main ruma application may not work well like this.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Crate version 0.3.0 was released, which implements &lt;code&gt;Clone&lt;&#x2F;code&gt; for the ID types and &lt;code&gt;Copy&lt;&#x2F;code&gt; for the error type.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m working on a change that would allow the ID types to be used directly as struct fields for Diesel table types.
Right now it seems like more trouble than it&#x27;s worth, but I&#x27;m following the issue on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;diesel-rs&#x2F;diesel&#x2F;issues&#x2F;348&quot;&gt;user-defined &lt;code&gt;FromSql&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;ToSql&lt;&#x2F;code&gt; types&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Paul Evans of the Matrix team is working on testing Ruma with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;sytest&quot;&gt;SyTest&lt;&#x2F;a&gt;, a blackbox integration testing framework for Matrix homeservers.
Even though few of the APIs are complete in Ruma so far, there are already a few tests passing!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-442&quot;&gt;SPEC-442&lt;&#x2F;a&gt;: Explain requirements and guarantees around transaction IDs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-444&quot;&gt;SPEC-444&lt;&#x2F;a&gt;: Add an API for getting auth flows
The May 22, 2016 news update mentioned that Vector and Synapse use unspecified APIs for negotiating authentication flows, but an issue was never filed for improving that.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-at-large&quot;&gt;Rust at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Starting to think about how permissions checks will work in Ruma, I opened an issue for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;diesel-rs&#x2F;diesel&#x2F;issues&#x2F;408&quot;&gt;transaction isolation support&lt;&#x2F;a&gt; in Diesel as a possible way to prevent ToCToU errors.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-08-07T00:00:00+00:00</published>
        <updated>2016-08-07T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-08-07/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-08-07/</id>
        <content type="html">&lt;p&gt;This week I began working on upgrading the libraries used by Ruma.
In particular, Diesel and Serde have new minor versions (which prior to 1.0 are effectively major versions.)
I&#x27;m also working on integrating ruma-identifiers and the recent round of changes to ruma-events back into Ruma.
Because of library changes, there are a lot of code updates needed.
I got the compiler errors down from about 60 to about 10, but there are a few blocking issues to fix the rest.
These are noted in the section on Rust below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Replace macro for enum implementation with more straightforward usage of Serde annotations where possible.
This means that &lt;code&gt;Display&lt;&#x2F;code&gt; and &lt;code&gt;FromStr&lt;&#x2F;code&gt; are no longer implemented for these types, but they may not be used by Ruma anyway.
They&#x27;ll be added back if and when there is an actual need.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-at-large&quot;&gt;Rust at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;diesel-rs&#x2F;diesel&#x2F;pull&#x2F;394&quot;&gt;diesel-rs&#x2F;diesel#394&lt;&#x2F;a&gt; Remove the &lt;code&gt;Copy&lt;&#x2F;code&gt; constraint from &lt;code&gt;Identifiable&lt;&#x2F;code&gt;.
In Diesel 0.7.0, struct fields representing a database table&#x27;s primary key must be &lt;code&gt;Copy&lt;&#x2F;code&gt;.
Because strings are used for this in Ruma, this PR must be merged in order to avoid a bunch of otherwise unnecessary newtypes in Ruma.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iron&#x2F;body-parser&#x2F;pull&#x2F;72&quot;&gt;iron&#x2F;body-parser#72&lt;&#x2F;a&gt;: Bump Serde to 0.8.
Needed due to version conflicts with &lt;code&gt;serde_json::Value&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-07-31T00:00:00+00:00</published>
        <updated>2016-07-31T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-07-31/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-07-31/</id>
        <content type="html">&lt;p&gt;This week &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;serde&#x2F;releases&#x2F;tag&#x2F;v0.8.0&quot;&gt;serde 0.8.0&lt;&#x2F;a&gt; was released, offering a new serialization API.
Most of the work on Ruma was towards serialization of the ID and event types.
This will support the next step of implementing APIs in the homeserver that take events as user input.
In addition to the changes landed in ruma-events, I&#x27;ve been working on figuring out how to approach Matrix types that are represented as enums in Rust code but involve checking the value of a key in the JSON structure of the serialized form to determine which variant it is.
I hope to get this nailed down and committed by next week&#x27;s update.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Implement serialization and deserialization for ID types.&lt;&#x2F;li&gt;
&lt;li&gt;Change the &lt;code&gt;new&lt;&#x2F;code&gt; constructor to an implementation of &lt;code&gt;TryFrom&lt;&#x2F;code&gt; and add a separate &lt;code&gt;generate&lt;&#x2F;code&gt; constructor for generating new IDs with random localparts.&lt;&#x2F;li&gt;
&lt;li&gt;Begin running the test suite on Travis CI.&lt;&#x2F;li&gt;
&lt;li&gt;Publish the crate to crates.io.
ruma-identifiers is the first Ruma component to get a crates.io release!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-events&quot;&gt;ruma-events&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Convert the types of struct fields that represent a Matrix ID from &lt;code&gt;String&lt;&#x2F;code&gt; to the relevant type from ruma-identifiers.&lt;&#x2F;li&gt;
&lt;li&gt;Manually implement serialization and deserialization for a few enum types where the variant name appears in JSON camel cased.
This was initially done by copy&#x2F;pasting similar code between types, but was replaced with a macro that reduced a lot of duplication (and actually increased the test suite coverage by testing every single variant of each enum.)&lt;&#x2F;li&gt;
&lt;li&gt;Begin running the test suite on Travis CI.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-07-24T00:00:00+00:00</published>
        <updated>2016-07-24T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-07-24/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-07-24/</id>
        <content type="html">&lt;p&gt;This was a relatively quiet week in terms of code changes.
I&#x27;m working on nailing down ruma-identifiers in preparation for using it in ruma-events before I start working on serialization in ruma-events, which is needed for the next step in ruma itself.
Serde is about to release 0.8, which has some breaking changes including a revamped API for manually implementing serialization.
I started to learn how it works since I&#x27;ll need to use it as soon as it&#x27;s released.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;EventId&lt;&#x2F;code&gt;, &lt;code&gt;RoomId&lt;&#x2F;code&gt;, and &lt;code&gt;RoomAliasId&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;I discovered that the new spec introduction that includes the grammar for Matrix IDs is missing some important details about event and room IDs.
The spec currently defines them as &lt;code&gt;sigil opaque_id &amp;quot;:&amp;quot; server_name&lt;&#x2F;code&gt; but does not define &lt;code&gt;opaque_id&lt;&#x2F;code&gt; at all.
Certain limitations are important to note for the purposes of parsing and compatibility, such as allowed character set and minimum and maximum lengths.
I think it&#x27;s also important to disallow characters that would be problematic for display or parsing, such as whitespace, newlines, and colons, which are also used as the delimiter between opaque ID, IP&#x2F;hostname, and port.
There was already a JIRA issue for specifying these types of IDs, &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-389&quot;&gt;SPEC-389&lt;&#x2F;a&gt;, so I added my concerns there.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-at-large&quot;&gt;Rust at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;rustup.rs&#x2F;releases&#x2F;tag&#x2F;0.4.0&quot;&gt;rustup 0.4&lt;&#x2F;a&gt; was released, which contains the change I made previously for allowing arbitrary toolchains to be installed alongside rustup itself.
I&#x27;ll be using this to improve Ruma&#x27;s Docker development image.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;serde&#x2F;pull&#x2F;462&quot;&gt;serde-rs&#x2F;serde#462&lt;&#x2F;a&gt;: A simple doc fix I made to Serde while looking through the 0.8 changes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1681&quot;&gt;rust-lang&#x2F;rfcs#1681&lt;&#x2F;a&gt;: Procedural macros 1.1.
Only tangentially related to Ruma, but an important effort that could help in getting Ruma onto stable Rust.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-07-17T00:00:00+00:00</published>
        <updated>2016-07-17T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-07-17/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-07-17/</id>
        <content type="html">&lt;p&gt;Ruma has a new logo!
You can see it on the &lt;a href=&quot;&#x2F;&quot;&gt;home page&lt;&#x2F;a&gt;, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&quot;&gt;GitHub organization&lt;&#x2F;a&gt;, and the &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ruma_io&quot;&gt;Twitter account&lt;&#x2F;a&gt;.
For a few weeks I&#x27;ve been experimenting with implementing additional parts of the room creation API, and have learned a lot about how I will approach it, but nothing has landed on master yet.
Some of my work has resulted in new issues for the spec, detailed below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-identifiers&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma-identifiers&quot;&gt;ruma-identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Following the new version of the spec which provides formal definitions of Matrix IDs, this new crate was added to the Ruma organization on GitHub to isolate the logic for Matrix IDs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-www-ruma-io&quot;&gt;Notable changes to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma.github.io&quot;&gt;www.ruma.io&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Add new logo to the home page.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;A new stable version of the client-server specification was released: r0.2.0.
Notable improvements include an explicit licensing of the spec and a formal definition of Matrix ID grammar.
The &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;blog&#x2F;2016&#x2F;07&#x2F;14&#x2F;client-server-spec-r0-2-0-released&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; has links to more.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-429&quot;&gt;SPEC-429&lt;&#x2F;a&gt;: Create room API: details of handling initial_state.
This issue will move important details currently only in the implementation of Synapse into the spec itself.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-at-large&quot;&gt;Rust at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;rustup.rs&#x2F;pull&#x2F;586&quot;&gt;rustup.rs#586&lt;&#x2F;a&gt;: Allow any toolchain to be specified as the default during rustup installation.
Once this is released, it will unblock &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;docker-ruma-dev&#x2F;issues&#x2F;1&quot;&gt;docker-ruma-dev#1&lt;&#x2F;a&gt;, which will allow for the version of nightly Rust used by Ruma to be pinned.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-07-03T00:00:00+00:00</published>
        <updated>2016-07-03T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-07-03/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-07-03/</id>
        <content type="html">&lt;p&gt;Three major milestones happened for Ruma this week!&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Support for events, the basic unit of data in Matrix, landed on the master branch.
This is very important, because it&#x27;s the foundation for almost all the core functionality of the homeserver.
The initial implementation of events does not support federation, to keep the scope small, and because the details of federation are still not well specified.&lt;&#x2F;li&gt;
&lt;li&gt;Ruma&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.ruma.io&#x2F;docs&#x2F;&quot;&gt;documentation website&lt;&#x2F;a&gt; was launched, with its first guide, the &lt;a href=&quot;https:&#x2F;&#x2F;www.ruma.io&#x2F;docs&#x2F;matrix&#x2F;&quot;&gt;Introduction to Matrix&lt;&#x2F;a&gt;, which provides a great explanation of Matrix targeted at non-technical users.&lt;&#x2F;li&gt;
&lt;li&gt;Ruma &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ruma_io&#x2F;status&#x2F;749834912077713409&quot;&gt;reached the top of the Hacker News front page&lt;&#x2F;a&gt;.
Be sure to read the &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=12028475&quot;&gt;comment thread&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Add support for events.&lt;&#x2F;li&gt;
&lt;li&gt;Add partial support for additional parameters to the room creation endpoint: &lt;code&gt;name&lt;&#x2F;code&gt;, &lt;code&gt;topic&lt;&#x2F;code&gt;, &lt;code&gt;preset&lt;&#x2F;code&gt;, and &lt;code&gt;invite&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Create some of the necessary events when a room is created: &lt;code&gt;m.room.create&lt;&#x2F;code&gt;, &lt;code&gt;m.room.name&lt;&#x2F;code&gt;, &lt;code&gt;m.room.topic&lt;&#x2F;code&gt;, &lt;code&gt;m.room.history_visibility&lt;&#x2F;code&gt;, &lt;code&gt;m.room.join_rules&lt;&#x2F;code&gt;, and &lt;code&gt;m.room.member&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;code&gt;ruma-events&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;All event types were restructured to include two generic parameters, one for the primary &amp;quot;content&amp;quot; payload, and one for optional &amp;quot;extra content.&amp;quot;
This was done to support certain events in the specification that have non-standard key-value pairs at the top level of the data structure.&lt;&#x2F;li&gt;
&lt;li&gt;Remove the &lt;code&gt;EventKind&lt;&#x2F;code&gt; trait.&lt;&#x2F;li&gt;
&lt;li&gt;Add support for custom event types.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-www-ruma-io&quot;&gt;Notable changes to &lt;code&gt;www.ruma.io&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Add new documentation site and Introduction to Matrix guide. (Contributed in part by Leah Scampoli.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;leahscampoli&quot;&gt;Leah Scampoli&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SYN-720&quot;&gt;SYN-720&lt;&#x2F;a&gt;: Validation of event content from user input&lt;&#x2F;p&gt;
&lt;p&gt;Note that this is a bug filed against Synapse, not the spec itself.
This was discovered while working on support for the room creation API endpoint&#x27;s &lt;code&gt;initial_state&lt;&#x2F;code&gt; parameter.
Ruma will do proper validation of state events created through this mechanism.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-06-26T00:00:00+00:00</published>
        <updated>2016-06-26T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-06-26/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-06-26/</id>
        <content type="html">&lt;p&gt;There was a lot of work on documentation and code this week, but almost nothing landed on master, so unfortunately there is little to show.
An initial draft of the Introduction to Matrix overview document has been pushed to a branch, but a few changes are still planned before it is released.
On Ruma itself, a lot of work happened on a branch (currently unpublished) to add support for events to the system.
Events are the primary object in the Matrix system, so the addition of this foundational layer will open the gates for all the other major features.
The event system is not simple, however, and it&#x27;s taking some time to figure out a good architecture for data persistence.
Because events are involved in both the client-server and federation APIs, and the federation API has not yet had a stable release, it&#x27;s very difficult to design the system properly.
One issue (noted below) has been opened on the Matrix spec requesting clarification that may help to decide on a suitable architecture.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;PUT &#x2F;directory&#x2F;room&#x2F;:room_alias&lt;&#x2F;code&gt; endpoint. (Contributed by Johannes Oertel.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;code&gt;ruma-events&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Use generic types for &lt;code&gt;Event&lt;&#x2F;code&gt;, &lt;code&gt;RoomEvent&lt;&#x2F;code&gt;, and &lt;code&gt;StateEvent&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Add unsigned field to &lt;code&gt;RoomEvent&lt;&#x2F;code&gt; and &lt;code&gt;StateEvent&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;EventKind&lt;&#x2F;code&gt; trait.
(The event kinds are basic events, room events, and state events.
This trait can be useful to constrain a generic parameter that must be a Matrix event.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-416&quot;&gt;SPEC-416&lt;&#x2F;a&gt;: Document all event keys shown in examples&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-06-19T00:00:00+00:00</published>
        <updated>2016-06-19T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-06-19/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-06-19/</id>
        <content type="html">&lt;p&gt;The effort last week to make it easy to identify ways to contribute to Ruma has already paid off with two new API endpoints being implemented by the community this week!
Leah and I finished a draft of the &amp;quot;introduction to Matrix&amp;quot; document that will appear on the forthcoming Ruma documentation website, and we are very pleased with it.
Hopefully everyone who reads it will find it useful in understanding Matrix (and those who already understand Matrix well will get some new ideas about how to explain it to the uninitiated.)
The documentation section for the website now exists on a Git branch, but the content isn&#x27;t filled in quite yet.
The Matrix guide is probably another week or two away, as we still need to proofread the draft of the overview and create the other documents (a feature overview and a long-form explanation of what problems Matrix is intended to solve.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;GET &#x2F;directory&#x2F;room&#x2F;:room_alias&lt;&#x2F;code&gt; endpoint. (Contributed by Johannes Oertel.)&lt;&#x2F;li&gt;
&lt;li&gt;Added &lt;code&gt;DELETE &#x2F;directory&#x2F;room&#x2F;:room_alias&lt;&#x2F;code&gt; endpoint. (Contributed by Lee Hinman.)&lt;&#x2F;li&gt;
&lt;li&gt;Updated the development setup to run entirely in Docker containers.&lt;&#x2F;li&gt;
&lt;li&gt;Started running Ruma&#x27;s test suite on Travis CI.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;torhve&quot;&gt;Tor Hveem&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dakrone&quot;&gt;Lee Hinman&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-06-12T00:00:00+00:00</published>
        <updated>2016-06-12T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-06-12/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-06-12/</id>
        <content type="html">&lt;p&gt;In addition to the bulleted highlights listed below, major work was done this week to help the community get involved in Ruma development.
The Git repository now includes contribution guidelines, as well as a document with a chart detailing all the API endpoints in the Matrix specification and the current status of support for each in Ruma.
Each endpoint in the chart links to a tracking issue on GitHub, offering a place for contributors to announce their interest in working on the endpoint and to discuss implementation.
A few additional issues were added to the issue tracker to give additional ideas for ways people interested in contributing can help.
These issues are listed below in the &amp;quot;contribution opportunities&amp;quot; section.&lt;&#x2F;p&gt;
&lt;p&gt;Lastly, my partner Leah (who works professionally as a technical writer) and I spent most of the weekend working on a new documentation website for Ruma.
The site will include Ruma&#x27;s user guide, as well as a section dedicated to introducing and explaining the concepts of Matrix.
With the launch of Vector (see &amp;quot;Matrix at large&amp;quot; below) this week, word about Matrix is going to start to spread faster, and Matrix is in dire need of very clear explanations that are targeted at non-technical users.
We are being extremely careful with the content of this Matrix concept documentation, choosing our terminology, analogies, and examples in a way that won&#x27;t assume too much about the reader&#x27;s knowledge and won&#x27;t overload them with buzzwords without explaining what they mean using words and concepts commonly understood by everyone.
I&#x27;m really excited to launch this new documentation site because I think it&#x27;s going to be very effective in helping both technical and non-technical people understand what Matrix is, how it works, and why someone would want to use it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POST &#x2F;createRoom&lt;&#x2F;code&gt;: Add support for the room&#x27;s initial canonical alias.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;POST &#x2F;createRoom&lt;&#x2F;code&gt;: Add support for setting the room&#x27;s visibility in the server&#x27;s public room directory.&lt;&#x2F;li&gt;
&lt;li&gt;Add support for configuration files in TOML and YAML formats.&lt;&#x2F;li&gt;
&lt;li&gt;Add CONTRIUBTING and STATUS documents as well as revised README content.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-www-ruma-io&quot;&gt;Notable changes to &lt;code&gt;www.ruma.io&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Revised the website&#x27;s style in preparation for the documenation sub-site.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mujx&quot;&gt;mujx&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;contribution-opportunities&quot;&gt;Contribution opportunities&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;66&quot;&gt;66&lt;&#x2F;a&gt;: Add test helper for creating a user and returning its access token&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruma&#x2F;ruma&#x2F;issues&#x2F;67&quot;&gt;67&lt;&#x2F;a&gt;: Create test database and run migrations from Rust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;Two members of the Matrix team were in San Francisco this week for &lt;a href=&quot;http:&#x2F;&#x2F;www.decentralizedweb.net&#x2F;&quot;&gt;Decentralized Web Summit&lt;&#x2F;a&gt;.
The most exciting announcement was that &lt;a href=&quot;https:&#x2F;&#x2F;vector.im&#x2F;&quot;&gt;Vector&lt;&#x2F;a&gt;, a slick Matrix client available as a web app, iOS app, and Android app, is now in open beta!
A blog post, &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@Vector&#x2F;say-hello-to-vector-2d33b23a787#.5zf8xd93f&quot;&gt;Say Hello To Vector!&lt;&#x2F;a&gt; was published alongside the announcement at the conference.
You can try Vector by chatting with us in the &lt;a href=&quot;https:&#x2F;&#x2F;vector.im&#x2F;beta&#x2F;#&#x2F;room&#x2F;#ruma:matrix.org&quot;&gt;room for Ruma&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;On Wednesday evening, I met the Matrix team and some other Matrix enthusiasts in the area for dinner near the Internet Archive&#x27;s office.
It was great to meet everyone in person.
We had some good discussions about Matrix, especially about how to address the risk of spam and abuse in the Matrix network using a reputation system.&lt;&#x2F;p&gt;
&lt;p&gt;New issues opened for the Matrix specification:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-409&quot;&gt;SPEC-409&lt;&#x2F;a&gt;: Enumerate all events created when a room is created&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-411&quot;&gt;SPEC-411&lt;&#x2F;a&gt;: Directory list API missing from the spec&lt;&#x2F;p&gt;
&lt;p&gt;(I later learned this was already reported in &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-370&quot;&gt;SPEC-370&lt;&#x2F;a&gt;: We need to spec the new &#x2F;directory&#x2F;room&#x2F;list API)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-06-05T00:00:00+00:00</published>
        <updated>2016-06-05T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-06-05/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-06-05/</id>
        <content type="html">&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add initial version of the &lt;code&gt;&#x2F;createRoom&lt;&#x2F;code&gt; endpoint.&lt;&#x2F;p&gt;
&lt;p&gt;This preliminary version of room creation takes no parameters and just returns the ID of the newly created room.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notable-changes-to-ruma-events&quot;&gt;Notable changes to &lt;code&gt;ruma-events&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remove event traits.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Event&lt;&#x2F;code&gt;, &lt;code&gt;RoomEvent&lt;&#x2F;code&gt;, and &lt;code&gt;StateEvent&lt;&#x2F;code&gt; are no longer traits.
Instead, each event type just has the necessary fields.
This will be revised to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1546&quot;&gt;RFC #1546&lt;&#x2F;a&gt; if it is accepted.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Make all event type fields public.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Derive &lt;code&gt;Debug&lt;&#x2F;code&gt;, &lt;code&gt;Deserialize&lt;&#x2F;code&gt;, and &lt;code&gt;Serialize&lt;&#x2F;code&gt; for all types.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add types for all &lt;em&gt;m.room.message&lt;&#x2F;em&gt; and all its subtypes.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;Next week, some of the Matrix core team will be visiting San Francisco (from London) for &lt;a href=&quot;http:&#x2F;&#x2F;www.decentralizedweb.net&#x2F;&quot;&gt;Decentralized Web Summit&lt;&#x2F;a&gt;.
Some bay area Matrix developers are planning to get together to meet in person and chat about Matrix.
If you live in the bay area and would like to join us, please come chat in &lt;a href=&quot;https:&#x2F;&#x2F;vector.im&#x2F;beta&#x2F;#&#x2F;room&#x2F;#sv:matrix.org&quot;&gt;#sv:matrix.org&lt;&#x2F;a&gt; and help pick a time and place!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-05-29T00:00:00+00:00</published>
        <updated>2016-05-29T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-05-29/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-05-29/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;In addition to the changes to &lt;code&gt;ruma&lt;&#x2F;code&gt; enumerated below, there was some great progress on the future user-facing documentation for Ruma.
My partner, who works as a technical writer, helped me brainstorm and outline what information people would need to understand Matrix and Ruma, how to get a copy of Ruma, configure it, and deploy it.
As always, needing to explain something simply to someone else forces you to understand it at a deeper level yourself.
I think the project is going to benefit greatly from some longer form explanations of of the what, why, and how of Matrix that aren&#x27;t targeted at technical people.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Usage of the &lt;code&gt;try!&lt;&#x2F;code&gt; macro has been converted to using the new question mark syntax.&lt;&#x2F;p&gt;
&lt;p&gt;Use of this unstable feature is one nice benefit of Ruma targeting nightly Rust.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Added support for authentication with an access token.&lt;&#x2F;p&gt;
&lt;p&gt;This is the mechanism which almost all endpoints that require authentication use.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Added the &lt;code&gt;&#x2F;logout&lt;&#x2F;code&gt; endpoint which revokes all access tokens associated with the user.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Added the &lt;code&gt;&#x2F;account&#x2F;password&lt;&#x2F;code&gt; endpoint which lets the user change their account password.&lt;&#x2F;p&gt;
&lt;p&gt;This endpoint uses both user-interactive authentication and access token authentication.
The reasons for this were not clear to me, so I discussed it in #matrix-dev:matrix.org, and was able to distill the results of the discussion into &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-407&quot;&gt;SPEC-407&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Moved and renamed various free functions into static methods on the types that they manipulate.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Filled in some missing API documentation and added the &lt;code&gt;#![deny(missing_docs)]&lt;&#x2F;code&gt; attribute to make sure docs are added as new items are.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;This week there was a story posted to Hacker News about how Google failed to recognize the value of Gchat, which resulted in the usual discussion of chat services that exist today.
I left a comment encouraging people to look at Matrix, and it generated a good amount of discussion and publicity for the project.
Be sure to read &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=11794914&quot;&gt;the thread&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-05-22T00:00:00+00:00</published>
        <updated>2016-05-22T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-05-22/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-05-22/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;Lots of progress this week!
As expected, I finished the &lt;code&gt;&#x2F;login&lt;&#x2F;code&gt; endpoint, so I can now move on to the real stuff: rooms and the event stream.
This week also saw two nice milestones:
Ruma&#x27;s first pull request was merged, and I successfully registered an account with a locally running Ruma server via a locally running &lt;a href=&quot;https:&#x2F;&#x2F;vector.im&#x2F;&quot;&gt;Vector&lt;&#x2F;a&gt; client.
(The latter also uncovered an undocumented API that Vector was attempting to use which I&#x27;ve brought up with the Matrix team.)&lt;&#x2F;p&gt;
&lt;p&gt;Before taking the plunge into rooms and events, I&#x27;m taking some time to think and plan about how to structure the data, and have been talking with the Matrix team about how Synapse handles things, lessons learned, and the trade offs of different approaches.
A few months ago, Erik Johnston of the core team wrote up some &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;erikjohnston&#x2F;ae60767679278c0c4519&quot;&gt;notes on data storage in Matrix&lt;&#x2F;a&gt; which has been very useful in this planning stage.
It&#x27;s a great read if you&#x27;re interested in some of the tricky issues in Matrix development.&lt;&#x2F;p&gt;
&lt;p&gt;There was also a little discussion on how difficult it is to represent certain JSON structures in the API as Rust types.
There are several data structures in the API that are effectively enums, but can&#x27;t be automatically deserialized by Serde because of two things:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;serde&#x2F;issues&#x2F;251&quot;&gt;how Serde currently handles enums&lt;&#x2F;a&gt; and the fact that variants can only be determined by examining the values of some of their fields.
The latter currently requires manual implementation of deserialization, which gets cumbersome very quickly.
The way I&#x27;m probably going to address this is to deserialize these types of data structures to an intermediate type so simple deserialization from JSON can be separated from higher level detection and validation logic.
To that end, I built the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jimmycuadra&#x2F;validations&quot;&gt;validations&lt;&#x2F;a&gt; library, which provides both an interface for validating a type, and types for representing validation errors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Finished a simple working version of the &lt;code&gt;&#x2F;login&lt;&#x2F;code&gt; API endpoint.&lt;&#x2F;li&gt;
&lt;li&gt;Added &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cross-origin_resource_sharing&quot;&gt;CORS&lt;&#x2F;a&gt; support to all endpoints.&lt;&#x2F;li&gt;
&lt;li&gt;Reexported the Iron handlers for API endpoints from their parent module to make imports a little less verbose.&lt;&#x2F;li&gt;
&lt;li&gt;Renamed the &lt;code&gt;FinalConfig&lt;&#x2F;code&gt; type to &lt;code&gt;Config&lt;&#x2F;code&gt;, and the previously named &lt;code&gt;Config&lt;&#x2F;code&gt; to the now private &lt;code&gt;RawConfig&lt;&#x2F;code&gt; type.&lt;&#x2F;li&gt;
&lt;li&gt;Revised the README with full documentation of the configuration file&#x27;s format along with some other improvements.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;new-contributors&quot;&gt;New contributors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jooert&quot;&gt;Johannes Oertel&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-05-15T00:00:00+00:00</published>
        <updated>2016-05-15T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-05-15/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-05-15/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;There were only a few commits this week, but there was very good progress on the test suite and some internals.
After trying several ways to work around libtest&#x27;s lack of global setup and teardown hooks, and some issues with the way each test was running an Iron server in a thread keeping database connections open forever, I decided to move the setup and teardown outside of the Rust code itself.
I explored the code of libtest and libsyntax and got to understand how it works and some of its limitations.
I might be creating an RFC for Rust soon to give the programmer independent control of the test collector and the test runner, which are currently bound together under the &lt;code&gt;--test&lt;&#x2F;code&gt; flag (AKA &lt;code&gt;--cfg test&lt;&#x2F;code&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;Now the PostgreSQL Docker container is started and stopped, and database migraitons are run from a shell script which wraps &lt;code&gt;cargo test&lt;&#x2F;code&gt;.
The Iron app was similarly decoupled from the Iron server, so that integration testing can be done with &lt;code&gt;iron-test&lt;&#x2F;code&gt; without ever starting an actual server.
Finally, I made some more progress on Matrix&#x27;s user-interactive authentication system and got part of the &lt;code&gt;&#x2F;login&lt;&#x2F;code&gt; endpoint completed.
I expect it to be fully functional by next week.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cleaned up test suite&lt;&#x2F;p&gt;
&lt;p&gt;Complicated setup and teardown extracted from the Rust code.
Test cases moved into the modules they test, rather than within a &lt;code&gt;tests&lt;&#x2F;code&gt;-directory-style module in &lt;code&gt;src&#x2F;test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Introduced &lt;code&gt;iron-test&lt;&#x2F;code&gt; to facilitate testing&lt;&#x2F;p&gt;
&lt;p&gt;The test suite now has a single support type, &lt;code&gt;test::Test&lt;&#x2F;code&gt;, which does per-test setup and teardown via RAII and provides succinct helper methods for making requests and testing the responses.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Initial version of the &lt;code&gt;&#x2F;login&lt;&#x2F;code&gt; API added.&lt;&#x2F;p&gt;
&lt;p&gt;The logic is all there, but there are some places where deserialization of the types used in the request body must be manually implemented because they differ in structure from what Serde can do with its custom derive attributes.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;The sections about authentication, registration, and login in the spec have seen some very nice improvements recently, but there are still some parts that are misleading or unclear.
I&#x27;m in the process of getting a few things clarified that will help finally nail down how these various APIs should work.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-05-08T00:00:00+00:00</published>
        <updated>2016-05-08T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-05-08/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-05-08/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m back from my vacation to Montreal and Quebec City (which are lovely and you should visit) and working on Ruma again!
Although development this past week was hindered a bit by another round of breaking changes to the Rust compiler&#x27;s &lt;code&gt;libsyntax&lt;&#x2F;code&gt; crate, which affects Ruma&#x27;s use of &lt;code&gt;serde&lt;&#x2F;code&gt; and &lt;code&gt;diesel&lt;&#x2F;code&gt;, there have been a few changes to Ruma and some movement on the Matrix specification.&lt;&#x2F;p&gt;
&lt;p&gt;For anyone interested in following This Week in Ruma regularly, it is now available via an &lt;a href=&quot;&#x2F;news&#x2F;feed.atom&quot;&gt;Atom feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New CLI subcommand, &lt;code&gt;ruma secret&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This new subcommand generates and prints a secure random value suitable as the &lt;code&gt;macaroon_secret_key&lt;&#x2F;code&gt; in the Ruma config file.
This value is used as the secret key for creating user access tokens using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cryptosphere&#x2F;rust-macaroons&quot;&gt;Macaroons&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Interactive authentication removed from &lt;code&gt;&#x2F;register&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;At least for now, user registration will not require any sort of external credential verification.
This area of the spec is currently less stable, so implementing it will wait until it makes more sense.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Simplified structure for crates, modules, and tests&lt;&#x2F;p&gt;
&lt;p&gt;The integration tests have been moved into the &lt;code&gt;src&lt;&#x2F;code&gt; directory so that it&#x27;s not necessary to split &lt;code&gt;ruma&lt;&#x2F;code&gt; into a binary and a library just so the integration tests can link to the library.
This makes Cargo.toml and various &lt;code&gt;cargo&lt;&#x2F;code&gt; commands simpler.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Swagger data source&lt;&#x2F;p&gt;
&lt;p&gt;By default, &lt;code&gt;ruma&lt;&#x2F;code&gt; now serves a JSON structure at &lt;code&gt;&#x2F;ruma&#x2F;swagger.json&lt;&#x2F;code&gt; that can be loaded by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swagger-api&#x2F;swagger-ui&quot;&gt;Swagger UI&lt;&#x2F;a&gt; to display the full Matrix client-server specification that will eventually be implemented by Ruma.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;There has been a bunch of activity on the spec recently.
It appears that the Matrix team is preparing for a stable 1.0 release of the client-server API spec.
A branch I worked on for the spec landing page of the specification was also merged.
Those changes improve the organization of the information to make several things clearer to first-time readers.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-04-24T00:00:00+00:00</published>
        <updated>2016-04-24T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-04-24/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-04-24/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;I said last week that there wouldn&#x27;t be an update this week because I&#x27;m on vacation, but as it turns out a bit of progress was made before I left and I have a few minutes to make the update while my partner writes postcards to send back home.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add initial stub implementation of user-interactive authentication.&lt;&#x2F;p&gt;
&lt;p&gt;Matrix&#x27;s interactive auth system is in a bit of a transition, so there has been lots of investigation and discussion with the core team to learn how it works.
I was able to make some good progress on how it will be represented as Rust code, but there are many more changes to come.
I hope to have &amp;quot;dummy&amp;quot; authentication working soon.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;Many of my questions about the specification have been answered, thanks to Richard van der Hoff of the Matrix core team.
A few issues are ongoing, but all of this discussion will be very helpful in improving the specification and clarifying some flows so that Ruma can implement them.&lt;&#x2F;p&gt;
&lt;p&gt;Specifically:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-385&quot;&gt;SPEC-385&lt;&#x2F;a&gt;: PUT requests should use the JSON body for all request parameters&lt;&#x2F;p&gt;
&lt;p&gt;Came to agreement that, at least for the &lt;code&gt;&#x2F;register&lt;&#x2F;code&gt; API endpoint, request parameters related to the registration should not be split arbitrarily across the query string and the body of the request.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-343&quot;&gt;SPEC-343&lt;&#x2F;a&gt;: Explain the purpose of refresh tokens&lt;&#x2F;p&gt;
&lt;p&gt;Clarified why Matrix authentication involves both &amp;quot;access tokens&amp;quot; and &amp;quot;refresh tokens,&amp;quot; where implementations are free to make their own choices, and the trade offs involved.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-313&quot;&gt;SPEC-313&lt;&#x2F;a&gt;: Provide a high level overview of the different event syncing API endpoints&lt;&#x2F;p&gt;
&lt;p&gt;Ongoing discussion of which APIs are used by the client to get events, and how best to update the spec to make recent API deprecations more clear.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-310&quot;&gt;SPEC-310&lt;&#x2F;a&gt;: Consider renaming &amp;quot;state key&amp;quot; to &amp;quot;subtype&amp;quot; and making it optional&lt;&#x2F;p&gt;
&lt;p&gt;Ongoing discussion of the semantics of Matrix&#x27;s &amp;quot;state events,&amp;quot; as well as discussion about how to balance the quality of the spec with the need to make progress on implementations.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;jira&#x2F;browse&#x2F;SPEC-308&quot;&gt;SPEC-308&lt;&#x2F;a&gt;: Authentication API is unclear&#x2F;misleading&lt;&#x2F;p&gt;
&lt;p&gt;Ongoing discussion about how the user-interactive authentication system relates to specific API endpoints that use it, like &lt;code&gt;&#x2F;register&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;login&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This Week in Ruma</title>
        <author>
            <name>Jimmy Cuadra</name>
        </author>
        <published>2016-04-17T00:00:00+00:00</published>
        <updated>2016-04-17T00:00:00+00:00</updated>
        <link href="https://www.ruma.io/news/this-week-in-ruma-2016-04-17/" type="text/html"/>
        <id>https://www.ruma.io/news/this-week-in-ruma-2016-04-17/</id>
        <content type="html">&lt;h2 id=&quot;from-the-editor&quot;&gt;From the editor&lt;&#x2F;h2&gt;
&lt;p&gt;Greetings! My name is Jimmy Cuadra and I am the developer of Ruma.
This is the first post in a new series of updates about the ongoing progress of Ruma.
It roughly follows the pattern of weekly newsletters for other projects in the Rust ecosystem, such as &lt;a href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;&quot;&gt;This Week in Rust&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;blog.servo.org&#x2F;&quot;&gt;This Week in Servo&lt;&#x2F;a&gt;, and &lt;a href=&quot;http:&#x2F;&#x2F;www.redox-os.org&#x2F;news&#x2F;&quot;&gt;This Week in Redox&lt;&#x2F;a&gt;.
I am doing this for a few reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To keep myself motivated to make progress on Ruma every week.&lt;&#x2F;li&gt;
&lt;li&gt;To promote interest in Ruma, Matrix, and Rust.&lt;&#x2F;li&gt;
&lt;li&gt;To provide interested parties in a way to keep track of the project&#x27;s development.&lt;&#x2F;li&gt;
&lt;li&gt;To provide interested parties opportunities to provide feedback and contribute.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Feedback is appreciated via GitHub issues, tweets, and comments on social media websites.&lt;&#x2F;p&gt;
&lt;p&gt;For the time being, I am not promising a post every single Sunday, since I am the project&#x27;s sole contributor at this point, and I may not be available to work on it every single week.
That said, Ruma is a big priority for me and I expect missed posts to be the exception rather than the rule. Notably, there will not be an update next week, as I will be on vacation in Montreal!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notable-changes-to-ruma&quot;&gt;Notable changes to &lt;code&gt;ruma&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Add support for full stack integration tests.&lt;&#x2F;li&gt;
&lt;li&gt;Implement access tokens using &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;macaroons&#x2F;&quot;&gt;macaroons&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Respond with appropriate errors when a guest operation is attempted.
For now, Ruma does not support Matrix guest users.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;matrix-at-large&quot;&gt;Matrix at large&lt;&#x2F;h2&gt;
&lt;p&gt;This week I had a good discussion with some of the Matrix core team members about the status of the Matrix specification and the role it plays in relation to Synapse, the homeserver developed by the Matrix team.
Synapse is described as a reference implementation of the Matrix spec, but after several months working on developing Ruma against the spec, I think it is more appropriate to say that Synapse is an experimental project that serves as a proving ground for what will eventually end up in the Matrix spec.
In other words, Synapse could not currently be recreated from only the information contained in the spec, as it contains a great deal of behavior that is not represented accurately or at all in the spec itself.
This is not a bad thing, but having some clarity on the exact purpose Synapse fulfills will be important in thinking about how best to develop and maintain the spec.&lt;&#x2F;p&gt;
&lt;p&gt;Obviously, my perspective on Matrix is that of an implementor, and so the spec is my concern over any details of Synapse.
The fact that Matrix has an open specification is one of the most important things that sets it apart from other attempts at a next-generation chat platform—especially the various &amp;quot;open source Slack clones&amp;quot; that have sprung up in the last year or so.
As a result of our discussion on the topic, I&#x27;ve decided to put more work into helping the Matrix team improve the spec, even if it means going slower on the development of Ruma.
I think my perspective as a developer attempting to implement an interoperable homeserver from the spec alone will be very valuable in filling out the gaps in the spec.
I am exactly its target audience!&lt;&#x2F;p&gt;
</content>
    </entry>
</feed>
